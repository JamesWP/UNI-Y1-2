KMD
00000000:             ; ;-----------------------------------------------------------------------------;
00000000:             ; ;---                 LAB KERNEL V1.0                                       ---;
00000000:             ; ;---                 ---------------                                       ---;
00000000:             ; ;--- Author: James W Peach                                                 ---;
00000000:             ; ;-----------------------------------------------------------------------------;
00000000:             ; 
00000000:             ; ;---------------
00000000:             ; ;---  EXCEPTION VECTOR TABLE
00000000: EA000006    ;       B     vReset
00000004: EA000010    ;       B     vUndef
00000008: EA000010    ;       B     vSupervisor    
0000000C: EA0000A1    ;       B     vPreAbort
00000010: EA0000A1    ;       B     vDataAbort
00000014: EAFFFFFE    ;       B     .           ; unused vector
00000018: EA0000A0    ;       B     vIRQ        ; interrupt request
0000001C: EA0000A0    ;       B     vFIQ        ; fast interrupt request
00000020:             ; ;---------------
00000020:             ; 
00000020:             ; ;---------------
00000020:             ; ;- KERNEL MODE LITERALS
00000020:             ; SPSR_SYSMODENI  EQU  0xDF
00000020:             ; SPSR_USERNI     EQU  0xD0
00000020:             ; ;---------------
00000020:             ; 
00000020:             ; 
00000020:             ; ;---------------
00000020:             ; ;-    deals with resets and initialises kernel and then calls user code @main
00000020:             ; vReset
00000020:             ;       ;- initialise supervisor mode stack
00000020: E28FDE3F    ;       ADRL  SP,  sSVC
00000024: E28DDA02    ; 
00000028:             ;       ;- switch to system mode
00000028: E3A0E0DF    ;       MOV   LR, #(SPSR_SYSMODENI)     ; system mode no interrupts
0000002C: E121F00E    ;       MSR   CPSR_c, LR
00000030:             ;       ;- initialise user mode stack
00000030: E28FDE3E    ;       ADRL  SP,  sUSR
00000034: E28DDA01    ; 
00000038:             ;       ;- initialise perhiperals
00000038: EB000090    ;       BL    PeripheralInitialise
0000003C:             ;       ;- switch to user mode
0000003C: E3A0E0D0    ;       MOV   LR, #(SPSR_USERNI)      ; user mode no interrupts
00000040: E121F00E    ;       MSR   CPSR_c, LR
00000044:             ;       ;- call user code
00000044: E28FEE26    ;       ADR   LR,  Main
00000048: E1B0F00E    ;       MOVS  PC,  LR
0000004C:             ; ;---------------
0000004C:             ;       
0000004C:             ; ;---------------    
0000004C:             ; ;-    deals with undefined instructions
0000004C:             ; vUndef
0000004C: EAFFFFFE    ;       B   .
00000050:             ; ;---------------
00000050:             ;       
00000050:             ; ;---------------    
00000050:             ; ;-    deals with supervisor calls
00000050:             ; SVC_OP_MASK EQU 0xFF000000
00000050:             ; vSupervisor
00000050: E92D5800    ;       PUSH  {LR,r12,r11}
00000054:             ; 
00000054:             ;       ; save spsr incase nested SVC calls
00000054: E14FB000    ;       MRS   r11, SPSR ;save spsr in reg
00000058: E92D0800    ;       PUSH  {r11}
0000005C:             ; 
0000005C: E51EC004    ;       LDR   r12, [LR, #-4]  ; load actual SVC instruction
00000060: E3CCC4FF    ;       BIC   r12,  r12,  #(SVC_OP_MASK) ; mask off opcode
00000064:             ;       ; supervisor call 
00000064: E35C0006    ;       CMP   r12, #SVCMax
00000068: 8A000016    ;       BHI   SVCUnknown
0000006C:             ; 
0000006C: E28FB010    ;       ADR   r11, SVCRoutines
00000070: E79BF10C    ;       LDR   PC, [r11,r12 LSL #2]
00000074:             ; 
00000074:             ; vSupervisor_return
00000074:             ;       ; return to user code
00000074:             ; 
00000074:             ;       ; return saved value of saved flags
00000074: E8BD0800    ;       POP   {r11}; containing saved spsr
00000078: E16FF00B    ;       MSR   SPSR, r11
0000007C:             ; 
0000007C: E8BD5800    ;       POP   {LR,r12,r11}
00000080: E1B0F00E    ;       MOVS  PC, LR ; return to user code here
00000084:             ; 
00000084:             ; ;-- this include should define symbols:
00000084:             ; ;--                                    SVCRoutines   ; a table of routines
00000084:             ; ;--                                                  ; each should return to: 
00000084:             ; ;--                                                  ; vSupervisor_return
00000084:             ; ;--                                    SVCMax        ; the max number of opcode
00000084:             ; ;--                                    SVCUnknown    ; report the error proc
00000084:             ; GET   KernelSVC.s
00000084:             ; ;-----------------------------------------------------------------------------;
00000084:             ; ;---                 LAB KERNEL V1.0                                       ---;
00000084:             ; ;---                 ---------------                                       ---;
00000084:             ; ;---                 SVC calls                                             ---;
00000084:             ; ;--- Author: James W Peach                                                 ---;
00000084:             ; ;-----------------------------------------------------------------------------;
00000084:             ; 
00000084:             ; ;-- this include should define symbols:
00000084:             ; ;--                                    SVCRoutines   ; a table of routines
00000084:             ; ;--                                                  ; each should return to: 
00000084:             ; ;--                                                  ; vSupervisor_return
00000084:             ; ;--                                    SVCMax        ; the max number of opcode
00000084:             ; ;--                                    SVCUnknown    ; report the error proc
00000084:             ; 
00000084:             ; SVCRoutines
00000084: 0000009C    ;       DEFW SVCRoutine0
00000088: 000000A0    ;       DEFW SVCRoutine1
0000008C: 000000A8    ;       DEFW SVCRoutine2
00000090: 000000B0    ;       DEFW SVCRoutine3
00000094: 000000B8    ;       DEFW SVCRoutine4
00000098: 000000C0    ;       DEFW SVCRoutine5
0000009C:             ; SVCRoutines_END
0000009C:             ; SVCMax EQU (SVCRoutines_END - SVCRoutines)/4
0000009C:             ; 
0000009C:             ; ;-- Routines
0000009C:             ; 
0000009C:             ; 
0000009C:             ; SVCRoutine0 
0000009C: EAFFFFFE    ;       B    .                                         ; user program end     
000000A0:             ; 
000000A0:             ; SVCRoutine1                                          ; print char r0 is char
000000A0:             ;       ;procedure PrintChar(R0=char)
000000A0: EB00000F    ;       BL    PrintChar
000000A4: EAFFFFF2    ;       B     vSupervisor_return                        
000000A8:             ; 
000000A8:             ; SVCRoutine2                                          ; print string r0 is
000000A8: EB00001F    ;       BL    PrintString                              ; string pointer
000000AC: EAFFFFF0    ;       B     vSupervisor_return                       
000000B0:             ; 
000000B0:             ; SVCRoutine3                                          ; get curent timer value
000000B0: EB000005    ;       BL    GetTimer                                 ; into r0
000000B4: EAFFFFEE    ;       B     vSupervisor_return
000000B8:             ; 
000000B8:             ; SVCRoutine4                                          ; get curent timer value
000000B8: EB000041    ;       BL    ClearScreen                              ; into r0
000000BC: EAFFFFEC    ;       B     vSupervisor_return
000000C0:             ; 
000000C0:             ; SVCRoutine5                                          ; get curent timer value
000000C0: EB000066    ;       BL    GetButton                                ; into r0
000000C4: EAFFFFEA    ;       B     vSupervisor_return
000000C8:             ; 
000000C8:             ; SVCUnknown
000000C8: EAFFFFFE    ;       B     .                                        ; unknown SVC call, hang..
000000CC:             ; 
000000CC:             ; ;-- this include should define symbols :
000000CC:             ; ;--                                      GetTimer    ; a procedure to return 
000000CC:             ; ;--                                                  ; curent timer value in r0 
000000CC:             ; GET   KernelTimer.s
000000CC:             ; ;-----------------------------------------------------------------------------;
000000CC:             ; ;---                 LAB KERNEL V1.0                                       ---;
000000CC:             ; ;---                 ---------------                                       ---;
000000CC:             ; ;---                 Timer                                                 ---;
000000CC:             ; ;--- Author: James W Peach                                                 ---;
000000CC:             ; ;-----------------------------------------------------------------------------;
000000CC:             ; 
000000CC:             ; ;-- this include should define symbols :
000000CC:             ; ;--                                      GetTimer    ; a procedure to return 
000000CC:             ; ;--                                                  ; curent timer value in r0 
000000CC:             ; 
000000CC:             ; TimerMemLoc   EQU   0x10000008
000000CC:             ; GetTimer
000000CC: E28F0FCD    ;         ADRL  r0, TimerMemLoc
000000D0: E2800BFF    ; 
000000D4: E28007FF    ; 
000000D8: E2800303    ; 
000000DC: E5500000    ;         LDRB  r0, [r0]
000000E0: E1A0F00E    ;         MOV   PC, LR
000000E4:             ; 
000000E4:             ; 
000000E4:             ; ;-- this include defines procedures to interface the KernelLCD
000000E4:             ; GET   KernelLCD.s
000000E4:             ; ;------------------------------------------------------------------------
000000E4:             ; ;            IO Library
000000E4:             ; ;           JWP 2015 - COMP227
000000E4:             ; ;           VERSION 1.1 for use in kernal
000000E4:             ; ;
000000E4:             ; ; contains io utilities
000000E4:             ; ;  incl write string, char, clear screen, convert control char to op
000000E4:             ; ;
000000E4:             ; ; Last modified 28/Jan, 04/Feb
000000E4:             ; ;
000000E4:             ; ;
000000E4:             ; ; Known bugs: None
000000E4:             ; ;
000000E4:             ; ;------------------------------------------------------------------------
000000E4:             ; 
000000E4:             ; 
000000E4:             ; LCD_Data    EQU 0x10000000
000000E4:             ; LCD_Control EQU 0x10000004
000000E4:             ; 
000000E4:             ; ENABLE  EQU   0x01
000000E4:             ; REGSEL  EQU   0x02
000000E4:             ; READNW  EQU   0x04
000000E4:             ;               
000000E4:             ; BACKLIGHT  EQU   0x20
000000E4:             ; CONTROL_CHAR EQU 0x20
000000E4:             ; CLEAR   EQU   0x01
000000E4:             ; 
000000E4:             ; ;---------------------------
000000E4:             ; ;procedure PrintChar(R0=char)
000000E4:             ; ; prints a single char on the LCD
000000E4:             ; ;---------------------------
000000E4:             ; PrintChar
000000E4: E92D4302    ;         PUSH{LR,r1,r8,r9}
000000E8:             ;         ;load Bdata and control pointers        
000000E8: E3A08201    ;         MOV   r8, #LCD_Data
000000EC: E3A09241    ;         MOV   r9, #LCD_Control
000000F0:             ;         ; wait for device
000000F0: EB000043    ;         BL    IOWait
000000F4:             ; 
000000F4:             ;         ; load control reg
000000F4: E5191000    ;         LDR   r1, [r9]
000000F8:             ;         ; setup = set write set REGSEL unset READNW
000000F8: E3C11004    ;         BIC   r1, r1, #(READNW)
000000FC:             ; 
000000FC: E3500020    ;         CMP   r0, #CONTROL_CHAR
00000100:             ; 
00000100: A3811002    ;         ORRGE r1, r1, #(REGSEL) ; for data reg
00000104: B3C11002    ;         BICLT r1, r1, #(REGSEL) ; for control reg
00000108: BB000019    ;         BLLT  ConvertControlChar; convert control char to operation
0000010C:             ;         
0000010C: E5091000    ;         STR   r1, [r9]
00000110:             ; 
00000110:             ;         ; set data
00000110: E5080000    ;         STR   r0, [r8]
00000114:             ; 
00000114:             ;         ; strobe enable
00000114: E3811001    ;         ORR   r1, r1, #(ENABLE)
00000118: E5091000    ;         STR   r1, [r9]
0000011C:             ; 
0000011C:             ;         ; strobe off        
0000011C: E3C11001    ;         BIC   r1, r1, #(ENABLE)
00000120: E5091000    ;         STR   r1, [r9]
00000124:             ; 
00000124:             ;         ;print char
00000124: E8BD4302    ;         POP{LR,r1,r8,r9}
00000128: E1A0F00E    ;         MOV   PC,LR
0000012C:             ; ;---------------------------
0000012C:             ; 
0000012C:             ; ;---------------------------
0000012C:             ; ;procedure PrintString(R0=string-pointer)
0000012C:             ; ; prints a \0 terminated string pointed to by string-pointer
0000012C:             ; ;---------------------------
0000012C:             ; PrintString
0000012C: E92D4002    ;         PUSH{LR,r1}
00000130: E1A01000    ;         MOV   r1, r0
00000134:             ; PrintString_repeat
00000134: E4D10001    ;         LDRB  r0, [r1], #1     ;load char + post increment
00000138:             ;         ;check for termination char -> jump to end
00000138: E3500000    ;         CMP   r0,#0
0000013C:             ; 
0000013C: 0A000001    ;         BEQ PrintString_end
00000140: EBFFFFE7    ;         BL PrintChar           ; PrintChar(R0=curent-char)
00000144: EAFFFFFA    ;         B  PrintString_repeat
00000148:             ; PrintString_end
00000148: E8BD4002    ;         POP{LR,r1}
0000014C: E1A0F00E    ;         MOV   PC,LR
00000150:             ; ;---------------------------
00000150:             ; 
00000150:             ; EnableBacklight
00000150: E92D4101    ;         PUSH{LR,r0,r8}
00000154:             ;         
00000154:             ;         ;load Bdata and control pointers        
00000154: E3A08201    ;         MOV   r8, #LCD_Data
00000158: E3A09241    ;         MOV   r9, #LCD_Control       
0000015C:             ;  
0000015C:             ;         ; wait for io to be ready 
0000015C: EB000028    ;         BL    IOWait
00000160:             ;         
00000160: E5190000    ;         LDR   r0, [r9]
00000164: E3800020    ;         ORR   r0, r0, #(BACKLIGHT)
00000168: E5090000    ;         STR   r0, [r9]
0000016C:             ; 
0000016C: E8BD4101    ;         POP{LR,r0,r8}
00000170: E1A0F00E    ;         MOV   PC,LR
00000174:             ;       
00000174:             ; ;---------------------------
00000174:             ; ;procedure ConvertControlChar(r0=char OUTPUT)
00000174:             ; ; converts the char in r0 to an operation
00000174:             ; ;
00000174:             ; CURSOR_POS_MASK EQU 0x7F
00000174:             ; 
00000174:             ; MOVE_CUR_OFFSET EQU 0x80
00000174:             ; LINE      EQU 0x40
00000174:             ; BEGIN_LINE_CLEAR EQU 0x1F
00000174:             ; 
00000174:             ; LINE_FEED EQU 0x0A
00000174:             ; CARR_RET  EQU 0x0D
00000174:             ; ;
00000174:             ; ;---------------------------
00000174:             ; ConvertControlChar
00000174: E92D4006    ;         PUSH{LR,r1,r2}
00000178:             ;       
00000178: EB000021    ;         BL    IOWait    ; wait for io to be ready to read
0000017C: E1A02000    ;         MOV   r2, r0
00000180:             ; 
00000180:             ;         ; load curent control
00000180: E5190000    ;         LDR   r0, [r9]
00000184:             ;         ; set read&control, unset enable
00000184: E3800004    ;         ORR   r0, r0, #(READNW)
00000188: E3C00003    ;         BIC   r0, r0, #(ENABLE | REGSEL)
0000018C: E5090000    ;         STR   r0, [r9]        
00000190:             ;         ; enable bus too
00000190: E3800001    ;         ORR   r0, r0, #(ENABLE)
00000194: E5090000    ;         STR   r0, [r9]
00000198:             ;         ; read data
00000198: E5181000    ;         LDR   r1, [r8]      
0000019C:             ;         ; disable bus
0000019C: E3C00001    ;         BIC   r0, r0, #(ENABLE)
000001A0: E5090000    ;         STR   r0, [r9]
000001A4:             ; 
000001A4:             ;         ; mask data to get curent cursor position
000001A4: E201107F    ;         AND   r1, r1, #CURSOR_POS_MASK
000001A8:             ;  
000001A8:             ;         ; if line feed char then add line length to pos
000001A8: E352000A    ;         CMP   r2, #LINE_FEED
000001AC: 02810040    ;         ADDEQ r0, r1, #(LINE)
000001B0:             ;         
000001B0:             ;         ; if carrege return clear line pos bits XXXX0000 
000001B0: E352000D    ;         CMP   r2, #CARR_RET
000001B4: 03C1001F    ;         BICEQ r0, r1, #(BEGIN_LINE_CLEAR)        
000001B8:             ; 
000001B8:             ;         ; add command to position
000001B8: E2800080    ;         ADD   r0, r0, #(MOVE_CUR_OFFSET)
000001BC:             ; 
000001BC: E8BD4006    ;         POP{LR,r1,r2}
000001C0: E1A0F00E    ;         MOV PC,LR
000001C4:             ; ;---------------------------
000001C4:             ; 
000001C4:             ; ;---------------------------
000001C4:             ; ;procedure ClearScreen
000001C4:             ; ; clears the screen and places cursor in top left corner
000001C4:             ; ;---------------------------
000001C4:             ; ClearScreen
000001C4: E92D4301    ;         PUSH{LR,r0,r9,r8}
000001C8:             ;         ;load data and control pointers        
000001C8: E3A08201    ;         MOV   r8, #LCD_Data
000001CC: E3A09241    ;         MOV   r9, #LCD_Control
000001D0:             ;         ;wait for device
000001D0: EB00000B    ;         BL    IOWait
000001D4:             ;         ;clear screen
000001D4:             ;         
000001D4: E5190000    ;         LDR   r0, [r9]
000001D8:             ;         ; set control
000001D8: E3C00006    ;         BIC   r0, r0, #(READNW | REGSEL)
000001DC: E5090000    ;         STR   r0, [r9]
000001E0:             ;         ; set data
000001E0: E3A00001    ;         MOV   r0, #CLEAR
000001E4: E5080000    ;         STR   r0, [r8]
000001E8:             ;         
000001E8:             ;         ; strobe enable on
000001E8: E5190000    ;         LDR   r0, [r9]
000001EC: E3800001    ;         ORR   r0, r0, #(ENABLE)
000001F0: E5090000    ;         STR   r0, [r9]
000001F4:             ; 
000001F4:             ;         ; strobe enable off
000001F4: E3C00001    ;         BIC   r0, r0, #(ENABLE)
000001F8: E5090000    ;         STR   r0, [r9]
000001FC:             ; 
000001FC: E8BD4301    ;         POP{LR,r0,r9,r8}
00000200: E1A0F00E    ;         MOV   PC,LR
00000204:             ; ;---------------------------
00000204:             ; 
00000204:             ; ;---------------------------
00000204:             ; ;procedure IOWait
00000204:             ; ; waits for the io to be ready
00000204:             ; ;---------------------------
00000204:             ; IOWait
00000204: E92D0003    ;         PUSH{r0,r1}
00000208:             ; 
00000208:             ; IOWait_repeat
00000208:             ; 
00000208:             ;         ; load curent control
00000208: E5190000    ;         LDR   r0, [r9]
0000020C:             ; 
0000020C:             ;         ; set read&control, unset enable
0000020C: E3800004    ;         ORR   r0, r0, #(READNW)
00000210: E3C00003    ;         BIC   r0, r0, #(ENABLE | REGSEL)
00000214: E5090000    ;         STR   r0, [r9]
00000218:             ;         
00000218:             ;         ; enable bus too
00000218: E3800001    ;         ORR   r0, r0, #(ENABLE)
0000021C: E5090000    ;         STR   r0, [r9]
00000220:             ;     
00000220:             ;         ; read data
00000220: E5181000    ;         LDR   r1, [r8]      
00000224:             ;             
00000224:             ;         ; disable bus
00000224: E3C00001    ;         BIC   r0, r0, #(ENABLE)
00000228: E5090000    ;         STR   r0, [r9]
0000022C:             ; 
0000022C:             ;         ; test bit 7 is low else repeat
0000022C: E2111080    ;         ANDS  r1, r1, #0x80
00000230: 1AFFFFF4    ;         BNE   IOWait_repeat
00000234:             ; 
00000234: E8BD0003    ;         POP{r0,r1}
00000238: E1A0F00E    ;         MOV   PC,LR
0000023C:             ; 
0000023C:             ; ;--------------------------
0000023C:             ; ;procedure LCDInit
0000023C:             ; ; initialises control signals
0000023C:             ; ;--------------------------
0000023C:             ; LCDInit
0000023C: E92D0301    ;         PUSH{r0,r8,r9}
00000240: E3A08201    ;         MOV   r8, #LCD_Data
00000244: E3A09241    ;         MOV   r9, #LCD_Control
00000248:             ; 
00000248: E3A00000    ;         MOV   r0, #0
0000024C: E5080000    ;         STR   r0, [r8] ; init data
00000250: E3A00010    ;         MOV   r0, #0x00000010
00000254: E5090000    ;         STR   r0, [r9] ; init control
00000258:             ; 
00000258: E8BD0301    ;         POP{r0,r8,r9}
0000025C: E1A0F00E    ;         MOV   PC, LR
00000260:             ; ;--------------------------
00000260:             ; 
00000260:             ; ;-- this include defines procedures to interface the buttons
00000260:             ; GET   KernelButtons.s
00000260:             ; ;-----------------------------------------------------------------------------;
00000260:             ; ;---                 LAB KERNEL V1.0                                       ---;
00000260:             ; ;---                 ---------------                                       ---;
00000260:             ; ;---                 Button io                                             ---;
00000260:             ; ;--- Author: James W Peach                                                 ---;
00000260:             ; ;-----------------------------------------------------------------------------;
00000260:             ; ;-- this include defines procedures to interface the buttons
00000260:             ; 
00000260:             ; 
00000260:             ; ButtonsMem EQU 0x10000004
00000260:             ; ButtonsMask EQU 0x3
00000260:             ; ButtonsShift EQU 0x6
00000260:             ; 
00000260:             ; GetButton
00000260:             ;       ;load
00000260: E28F0F67    ;       ADRL  r0, ButtonsMem
00000264: E2800BFF    ; 
00000268: E28007FF    ; 
0000026C: E2800303    ; 
00000270: E5500000    ;       LDRB  r0, [r0]
00000274: E1A00320    ;       MOV   r0, r0, LSR #ButtonsShift
00000278: E2000003    ;       AND   r0, r0, #ButtonsMask
0000027C: E1A0F00E    ;       MOV PC,LR
00000280:             ;       
00000280:             ; 
00000280:             ; ;---------------
00000280:             ; ;-- procedure PeripheralInitialise initialies perhiperals
00000280:             ; PeripheralInitialise
00000280: E92D4000    ;       PUSH  {LR}
00000284: EBFFFFEC    ;       BL    LCDInit           ; init control signals
00000288: EBFFFFB0    ;       BL    EnableBacklight   ; enable backlight
0000028C: EBFFFFCC    ;       BL    ClearScreen       ; clear screen
00000290: E8BD4000    ;       POP   {LR}
00000294: E1A0F00E    ;       MOV   PC, LR
00000298:             ; ;---------------
00000298:             ; 
00000298:             ; ;---------------    
00000298:             ; ;-    deals with prefetch aborts
00000298:             ; vPreAbort
00000298: EAFFFFFE    ;       B   .
0000029C:             ; ;---------------
0000029C:             ;       
0000029C:             ; ;---------------    
0000029C:             ; ;-    deals with data aborts
0000029C:             ; vDataAbort
0000029C: EAFFFFFE    ;       B   .
000002A0:             ; ;---------------
000002A0:             ;       
000002A0:             ; ;---------------    
000002A0:             ; ;-    deals with interrupt handling
000002A0:             ; vIRQ  
000002A0: EAFFFFFE    ;       B   .
000002A4:             ; ;---------------
000002A4:             ;       
000002A4:             ; ;---------------    
000002A4:             ; ;-    deals with fast interrupt handling
000002A4:             ; vFIQ
000002A4: EAFFFFFE    ;       B   .
000002A8:             ; ;---------------
000002A8:             ;      
000002A8:             ; 
000002A8:             ; GET   UserProgram.s
000002A8:             ; ;-----------------------------------------------------------------------------;
000002A8:             ; ;-----                    UserProgram Test                                ----;
000002A8:             ; ;-----                    a program to test svc calls                     ----;
000002A8:             ; ;--- Author: James W Peach                                                 ---;
000002A8:             ; ;-----------------------------------------------------------------------------;
000002A8:             ; 
000002A8:             ; ;------------------------
000002A8:             ; ;-- literals
000002A8:             ; TIMER_MAX_VAL   EQU     0xFF
000002A8:             ; 
000002A8:             ; ;------------------------
000002A8:             ; ;-- variables memory
000002A8:             ; my_counter                ; number of 100ms passed scince bootup
000002A8: 00000000    ;         DEFW   0x0
000002AC:             ; 
000002AC:             ; ;------------------------
000002AC:             ; ;- UserProgram
000002AC:             ; Main    
000002AC:             ;         ; init timer
000002AC: E3A0A000    ;         MOV   r10, #0           ; r10 is miliseconds not counted ; prev remainder
000002B0: E3A09000    ;         MOV   r9 , #0           ; last value of counter
000002B4: E3A08000    ;         MOV   r8 , #0           ; reset countdown
000002B8:             ; 
000002B8: E28F0F51    ;         ADRL  r0 , MESSAGE
000002BC: EF000002    ;         SVC   2
000002C0:             ; 1
000002C0:             ;         ; load curent counter
000002C0: EF000003    ;         SVC   3
000002C4:             ;         ; find difference
000002C4:             ;         
000002C4:             ;         ; if new < old
000002C4: E1500009    ;         CMP   r0, r9
000002C8:             ;         ;  time passed is ( 255 - (old - new) )
000002C8: 90491000    ;         SUBLS r1, r9, r0
000002CC: 926110FF    ;         RSBLS r1, r1, #TIMER_MAX_VAL
000002D0:             ;         ; else 
000002D0:             ;         ;  time passed is ( new - old )
000002D0: 80401009    ;         SUBHI r1, r0, r9
000002D4:             ; 
000002D4:             ;         ; save old timer
000002D4: E1A09000    ;         MOV   r9, r0
000002D8:             ; 
000002D8:             ;         ;divide time passed by 100 and get quotient: r0 and remainder: r2
000002D8:             ; 
000002D8:             ;         ; first add previous remainder
000002D8: E081100A    ;         ADD r1, r1, r10
000002DC:             ; 
000002DC:             ;         ; save new remainder
000002DC: E1A0A002    ;         MOV   r10, r2
000002E0:             ; 
000002E0:             ; 
000002E0:             ;         ; miliseconds passed is += r0:(time passed / 100)
000002E0: E51F3040    ;         LDR   r3, my_counter
000002E4: E0833000    ;         ADD   r3, r3, r0
000002E8: E50F3048    ;         STR   r3, my_counter
000002EC:             ; 
000002EC:             ;         ; update display every 1000 itterations
000002EC: E2877001    ;         ADD   r7, r7, #1
000002F0: E3570FFA    ;         CMP   r7, #1000
000002F4: 83A07000    ;         MOVHI r7, #0
000002F8: 81A00003    ;         MOVHI r0, r3
000002FC: 8B00001D    ;         BLHI  DisplayTimer
00000300:             ; 
00000300:             ;         ; read button state
00000300: EF000005    ; 2       SVC   5
00000304: E3500001    ;         CMP   r0, #1
00000308: 0AFFFFFC    ;         BEQ   %b2
0000030C:             ; 
0000030C:             ;         ; if(contdown!=0)
0000030C: E3580000    ;         CMP   r8, #0
00000310: 0A000007    ;         BEQ   %f3
00000314:             ;         
00000314: E1580003    ;         CMP   r8, r3
00000318:             ;         ; if limit reached save counter 0 and remove countdown
00000318: 33A08000    ;         MOVLO r8, #0
0000031C: 33A00000    ;         MOVLO r0, #0
00000320: 350F0080    ;         STRLO r0, my_counter
00000324:             ;         ; if button not pressed remove countdown
00000324: EF000005    ;         SVC   5
00000328: E3500002    ;         CMP   r0, #2
0000032C: 13A08000    ;         MOVNE r8, #0
00000330: EAFFFFE2    ;         B     %b1     ;; repeat timer loop
00000334:             ; 3
00000334:             ;         ; else if (button pressed)
00000334: EF000005    ;         SVC   5
00000338: E3500002    ;         CMP   r0, #2
0000033C:             ;         ; store limit 
0000033C: 02838AFF    ;         ADDEQ r8, r3, #0xFF000
00000340: EAFFFFDE    ;         B     %b1     ;; repeat timer loop
00000344:             ; 
00000344:             ;         
00000344:             ; ;------------------------
00000344:             ; 
00000344:             ; ;------------------------
00000344:             ; ;- procedure Divide(R0=numerator IN/quotient OUT, R1=denominator IN
00000344:             ; ;-      ,R2=remainder OUT) 
00000344:             ; ;-  computed integer division R0/R1
00000344:             ; ;-  returns quotient in R0 and remainder in R2
00000344:             ; ;- 
00000344:             ; ;- code adapted from bcd_conver.s @ /opt/info/courses/COMP227...
00000344:             ; Divide
00000344: E3A02000    ;         MOV     r2, #0                  ; AccH
00000348: E3A03020    ;         MOV     r3, #32                 ; Number of bits in division
0000034C: E0900000    ;         ADDS    r0, r0, r0              ; Shift dividend
00000350:             ; 
00000350: E0A22002    ; 1       ADC     r2, r2, r2              ; Shift AccH, carry into LSB
00000354: E1520001    ;         CMP     r2, r1                  ; Will it go?
00000358: 20422001    ;         SUBHS   r2, r2, r1              ; If so, subtract
0000035C: E0B00000    ;         ADCS    r0, r0, r0              ; Shift dividend & Acc. result
00000360: E2433001    ;         SUB     r3, r3, #1              ; Loop count
00000364: E1130003    ;         TST     r3, r3                  ; Leaves carry alone
00000368: 1AFFFFF8    ;         BNE     %b1                     ; Repeat as required
0000036C:             ; 
0000036C: E1A0F00E    ;         MOV     pc, lr                  ; Return
00000370:             ; ;------------------------
00000370:             ; 
00000370:             ; 
00000370:             ; ;------------------------
00000370:             ; ;-procedure DisplayTimer(R0=decimal time)
00000370:             ; ;- displays the passed value on the LCD in the curent position
00000370: 00002710    ; tenthou DEFW 10000
00000374: 000186A0    ; hundthou DEFW 100000
00000378:             ; 
00000378:             ; DisplayTimer
00000378: E92D400E    ;         PUSH {r1,r2,r3,LR}
0000037C:             ; 
0000037C: E3A01FFA    ;         MOV     r1, #1000
00000380: EBFFFFEF    ;         BL      Divide
00000384:             ; 
00000384: E51F1018    ;         LDR     r1, hundthou
00000388: EBFFFFED    ;         BL      Divide
0000038C: E1A03002    ;         MOV     r3, r2
00000390:             ; 
00000390:             ;         ; move cursor to beginning of line
00000390: E3A0000D    ;         MOV     r0, #('\r')
00000394: EF000001    ;         SVC     1
00000398:             ; 
00000398: E1A00003    ;         MOV     r0, r3
0000039C:             ; 
0000039C:             ; 
0000039C:             ;         ;---- tenthou   -----
0000039C:             ;         ;Divide r0 / 10000
0000039C: E51F1034    ;         LDR     r1, tenthou
000003A0: EBFFFFE7    ;         BL      Divide
000003A4:             ;         ;Print quotient
000003A4: E2800030    ;         ADD     r0, r0, #('0')
000003A8: EF000001    ;         SVC     1
000003AC:             ; 
000003AC:             ;         ;---- thousands -----
000003AC:             ;         ;Divide r0 / 1000
000003AC: E3A01FFA    ;         MOV     r1, #1000
000003B0: E1A00002    ;         MOV     r0, r2
000003B4: EBFFFFE2    ;         BL      Divide
000003B8:             ;         ;Print quotient
000003B8: E2800030    ;         ADD     r0, r0, #('0')
000003BC: EF000001    ;         SVC     1
000003C0:             ; 
000003C0: E3A0002E    ;         MOV     r0, #('.')
000003C4: EF000001    ;         SVC     1
000003C8:             ; 
000003C8:             ; 
000003C8:             ;         ;---- hundreds  -----
000003C8:             ;         ;Divide r0 / 100
000003C8: E3A01064    ;         MOV     r1, #100
000003CC: E1A00002    ;         MOV     r0, r2
000003D0: EBFFFFDB    ;         BL      Divide
000003D4:             ;         ;Print quotient
000003D4: E2800030    ;         ADD     r0, r0, #('0')
000003D8: EF000001    ;         SVC     1
000003DC:             ;         
000003DC:             ;         ;---- tens      -----
000003DC:             ;         ;Divide r0 / 10
000003DC: E3A0100A    ;         MOV     r1, #10
000003E0: E1A00002    ;         MOV     r0, r2
000003E4: EBFFFFD6    ;         BL      Divide
000003E8:             ;         ;Print quotient
000003E8: E2800030    ;         ADD     r0, r0, #('0')
000003EC: EF000001    ;         SVC     1
000003F0:             ; 
000003F0:             ;         ;---- units -----
000003F0:             ;         ;print remainder
000003F0: E1A00002    ;         MOV     r0, r2
000003F4: E2800030    ;         ADD     r0, r0, #('0')
000003F8: EF000001    ;         SVC     1
000003FC:             ; 
000003FC: E8BD400E    ;         POP {r1,r2,r3,LR}
00000400: E1A0F00E    ;         MOV PC, LR
00000404:             ; ;------------------------
00000404:             ; 
00000404: 53 74 6F 70 ; MESSAGE DEFB 'Stopwatch v1.0\r\n', 0x0
00000408: 77 61 74 63 ; 
0000040C: 68 20 76 31 ; 
00000410: 2E 30 0D 0A ; 
00000414: 00          ; 
00000415:             ;  
00000415:             ; ;---------------
00000415:             ; ;-    stack areas
00000418:             ;       ALIGN
00000418:             ;       DEFS  4096
00001418:             ; sUSR  ; user mode stack area
00001418:             ;       DEFS  4096
00002418:             ; sSVC  ; svc mode stack area
00002418:             ;       DEFS  4096
00003418:             ; sABO  ; abort mode stack area
00003418:             ;       DEFS  4096
00004418:             ; sUDE  ; undefined mode stack area
00004418:             ;       DEFS  4096
00005418:             ; sIRQ  ; interrupt mode stack area
00005418:             ;       DEFS  4096
00006418:             ; sFIQ  ; fast interrupt mode stack area
00006418:             ; ;---------------
00006418:             ; 
00006418:             ; 
00006418:             ; ; FIN
00006418:             ; 

Symbol Table: Labels
: SPSR_SYSMODENI                    000000DF  Value
: SPSR_USERNI                       000000D0  Value
: vReset                            00000020  Local -- ARM
: vUndef                            0000004C  Local -- ARM
: SVC_OP_MASK                       FF000000  Value
: vSupervisor                       00000050  Local -- ARM
: vSupervisor_return                00000074  Local -- ARM
: SVCRoutines                       00000084  Local -- ARM
: SVCRoutines_END                   0000009C  Local -- ARM
: SVCMax                            00000006  Value
: SVCRoutine0                       0000009C  Local -- ARM
: SVCRoutine1                       000000A0  Local -- ARM
: SVCRoutine2                       000000A8  Local -- ARM
: SVCRoutine3                       000000B0  Local -- ARM
: SVCRoutine4                       000000B8  Local -- ARM
: SVCRoutine5                       000000C0  Local -- ARM
: SVCUnknown                        000000C8  Local -- ARM
: TimerMemLoc                       10000008  Value
: GetTimer                          000000CC  Local -- ARM
: LCD_Data                          10000000  Value
: LCD_Control                       10000004  Value
: ENABLE                            00000001  Value
: REGSEL                            00000002  Value
: READNW                            00000004  Value
: BACKLIGHT                         00000020  Value
: CONTROL_CHAR                      00000020  Value
: CLEAR                             00000001  Value
: PrintChar                         000000E4  Local -- ARM
: PrintString                       0000012C  Local -- ARM
: PrintString_repeat                00000134  Local -- ARM
: PrintString_end                   00000148  Local -- ARM
: EnableBacklight                   00000150  Local -- ARM
: CURSOR_POS_MASK                   0000007F  Value
: MOVE_CUR_OFFSET                   00000080  Value
: LINE                              00000040  Value
: BEGIN_LINE_CLEAR                  0000001F  Value
: LINE_FEED                         0000000A  Value
: CARR_RET                          0000000D  Value
: ConvertControlChar                00000174  Local -- ARM
: ClearScreen                       000001C4  Local -- ARM
: IOWait                            00000204  Local -- ARM
: IOWait_repeat                     00000208  Local -- ARM
: LCDInit                           0000023C  Local -- ARM
: ButtonsMem                        10000004  Value
: ButtonsMask                       00000003  Value
: ButtonsShift                      00000006  Value
: GetButton                         00000260  Local -- ARM
: PeripheralInitialise              00000280  Local -- ARM
: vPreAbort                         00000298  Local -- ARM
: vDataAbort                        0000029C  Local -- ARM
: vIRQ                              000002A0  Local -- ARM
: vFIQ                              000002A4  Local -- ARM
: TIMER_MAX_VAL                     000000FF  Value
: my_counter                        000002A8  Local -- ARM
: Main                              000002AC  Local -- ARM
: Divide                            00000344  Local -- ARM
: tenthou                           00000370  Local -- ARM
: hundthou                          00000374  Local -- ARM
: DisplayTimer                      00000378  Local -- ARM
: MESSAGE                           00000404  Local -- ARM
: sUSR                              00001418  Local -- ARM
: sSVC                              00002418  Local -- ARM
: sABO                              00003418  Local -- ARM
: sUDE                              00004418  Local -- ARM
: sIRQ                              00005418  Local -- ARM
: sFIQ                              00006418  Local -- ARM
