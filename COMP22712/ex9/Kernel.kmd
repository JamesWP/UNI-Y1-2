KMD
00000000:             ; ;-----------------------------------------------------------------------------;
00000000:             ; ;---                 LAB KERNEL V1.0                                       ---;
00000000:             ; ;---                 ---------------                                       ---;
00000000:             ; ;--- Author: James W Peach                                                 ---;
00000000:             ; ;-----------------------------------------------------------------------------;
00000000:             ; 
00000000:             ; ;---------------
00000000:             ; ;---  EXCEPTION VECTOR TABLE
00000000: EA000006    ;       B     vReset
00000004: EA000017    ;       B     vUndef
00000008: EA000017    ;       B     vSupervisor    
0000000C: EA00012D    ;       B     vPreAbort
00000010: EA00012D    ;       B     vDataAbort
00000014: EAFFFFFE    ;       B     .           ; unused vector
00000018: EA00012C    ;       B     vIRQ        ; interrupt request
0000001C: EA00012C    ;       B     vFIQ        ; fast interrupt request
00000020:             ; ;---------------
00000020:             ; 
00000020:             ; ;---------------
00000020:             ; ;- KERNEL MODE LITERALS
00000020:             ; SPSR_SYSMODENI  EQU  0xDF
00000020:             ; SPSR_SVCMODENI  EQU  0xD3
00000020:             ; SPSR_IRQMODENI  EQU  0xD2
00000020:             ; SPSR_USER       EQU  0b0101_0000 ; interupt enabled fast interupts disabled ARM
00000020:             ; ;---------------
00000020:             ; 
00000020:             ; ;---------------
00000020:             ; ;-    deals with resets and initialises kernel and then calls user code @main
00000020:             ; vReset
00000020:             ;       ;- initialise supervisor mode stack
00000020: E28FDE5A    ;       ADRL  SP,  sSVC
00000024: E28DDA02    ; 
00000028:             ; 
00000028:             ;       ;- switch to system mode
00000028: E3A0E0DF    ;       MOV   LR, #(SPSR_SYSMODENI)     ; system mode no interrupts
0000002C: E121F00E    ;       MSR   CPSR_c, LR
00000030:             ;       ;- initialise user mode stack
00000030: E28FDE59    ;       ADRL  SP,  sUSR
00000034: E28DDA01    ; 
00000038:             ; 
00000038:             ;       ;- switch to intterupt mode
00000038: E3A0E0D2    ;       MOV   LR, #(SPSR_IRQMODENI)     ; int mode no interrupts
0000003C: E121F00E    ;       MSR   CPSR_c, LR
00000040:             ;       ;- initialise int mode stack
00000040: E28FDD56    ;       ADRL  SP,  sIRQ
00000044: E28DD901    ; 
00000048:             ; 
00000048:             ;       ;- switch back to supervisor mode to:
00000048:             ;       ;- - do perhip Initialise
00000048:             ;       ;- - do user context switch with SPSR
00000048:             ; 
00000048: E3A0E0D3    ;       MOV   LR, #(SPSR_SVCMODENI)     ; supervisor mode no interrupts
0000004C: E121F00E    ;       MSR   CPSR_c, LR
00000050:             ; 
00000050:             ;       ;- initialise perhiperals
00000050: EB000114    ;       BL    PeripheralInitialise
00000054:             ; 
00000054:             ;       ;- switch to user mode using the SPSR
00000054: E3A0E050    ;       MOV   LR, #(SPSR_USER)
00000058: E161F00E    ;       MSR   SPSR_c, LR
0000005C:             ; 
0000005C:             ;       ;- call user code
0000005C: E28FE07C    ;       ADRL  LR,  Main
00000060: E28EEB01    ; 
00000064: E1B0F00E    ;       MOVS  PC,  LR
00000068:             ; ;---------------
00000068:             ;       
00000068:             ; ;---------------    
00000068:             ; ;-    deals with undefined instructions
00000068:             ; vUndef
00000068: EAFFFFFE    ;       B   .
0000006C:             ; ;---------------
0000006C:             ;       
0000006C:             ; ;---------------    
0000006C:             ; ;-    deals with supervisor calls
0000006C:             ; SVC_OP_MASK EQU 0xFF000000
0000006C:             ; vSupervisor
0000006C: E92D5800    ;       PUSH  {LR,r12,r11}
00000070:             ; 
00000070:             ;       ; save spsr incase nested SVC calls
00000070: E14FB000    ;       MRS   r11, SPSR ;save spsr in reg
00000074: E92D0800    ;       PUSH  {r11}
00000078:             ; 
00000078: E51EC004    ;       LDR   r12, [LR, #-4]  ; load actual SVC instruction
0000007C: E3CCC4FF    ;       BIC   r12,  r12,  #(SVC_OP_MASK) ; mask off opcode
00000080:             ;       ; supervisor call 
00000080: E35C0007    ;       CMP   r12, #SVCMax
00000084: 8A000018    ;       BHI   SVCUnknown
00000088:             ; 
00000088: E28FB000    ;       ADR   r11, SVCRoutines
0000008C: E79BF10C    ;       LDR   PC, [r11,r12 LSL #2]
00000090:             ; 
00000090:             ; ;-- this include should define symbols:
00000090:             ; ;--                                    SVCRoutines   ; a table of routines
00000090:             ; ;--                                                  ; each should return to: 
00000090:             ; ;--                                                  ; vSupervisor_return
00000090:             ; ;--                                    SVCMax        ; the max number of opcode
00000090:             ; ;--                                    SVCUnknown    ; report the error proc
00000090:             ; GET   KernelSVC.s
00000090:             ; ;-----------------------------------------------------------------------------;
00000090:             ; ;---                 LAB KERNEL V1.0                                       ---;
00000090:             ; ;---                 ---------------                                       ---;
00000090:             ; ;---                 SVC calls                                             ---;
00000090:             ; ;--- Author: James W Peach                                                 ---;
00000090:             ; ;-----------------------------------------------------------------------------;
00000090:             ; 
00000090:             ; ;-- this include should define symbols:
00000090:             ; ;--                                    SVCRoutines   ; a table of routines
00000090:             ; ;--                                                  ; each should return to: 
00000090:             ; ;--                                                  ; vSupervisor_return
00000090:             ; ;--                                    SVCMax        ; the max number of opcode
00000090:             ; ;--                                    SVCUnknown    ; report the error proc
00000090:             ; 
00000090:             ; SVCRoutines
00000090: 000000B0    ;       DEFW SVCRoutine0
00000094: 000000B4    ;       DEFW SVCRoutine1
00000098: 000000BC    ;       DEFW SVCRoutine2
0000009C: 000000C4    ;       DEFW SVCRoutine3
000000A0: 000000CC    ;       DEFW SVCRoutine4
000000A4: 000000D4    ;       DEFW SVCRoutine5
000000A8: 000000DC    ;       DEFW SVCRoutine6
000000AC:             ; SVCRoutines_END
000000AC: 000000E4    ;       DEFW SVCRoutine7
000000B0:             ; 
000000B0:             ; SVCMax EQU ((SVCRoutines_END - SVCRoutines)/4)
000000B0:             ; 
000000B0:             ; ;-- Routines
000000B0:             ; 
000000B0:             ; 
000000B0:             ; SVC_HALT  EQU  0
000000B0:             ; SVCRoutine0 
000000B0: EAFFFFFE    ;       B    .                                         ; user program end     
000000B4:             ; 
000000B4:             ; SVC_CHAR  EQU  1
000000B4:             ; SVCRoutine1                                          ; print char r0 is char
000000B4:             ;       ;procedure PrintChar(R0=char)
000000B4: EB000016    ;       BL    PrintChar
000000B8: EA00000C    ;       B     vSupervisor_return                        
000000BC:             ; 
000000BC:             ; SVC_STR   EQU  2
000000BC:             ; SVCRoutine2                                          ; print string r0 is
000000BC: EB000025    ;       BL    PrintString                              ; string pointer
000000C0: EA00000A    ;       B     vSupervisor_return                       
000000C4:             ; 
000000C4:             ; 
000000C4:             ; SVC_TIME  EQU  3
000000C4:             ; SVCRoutine3                                          ; get curent timer value
000000C4: EB00000D    ;       BL    GetTimer                                 ; into r0
000000C8: EA000008    ;       B     vSupervisor_return
000000CC:             ; 
000000CC:             ; SVC_CLER  EQU  4
000000CC:             ; SVCRoutine4                                          ; clears the lcd
000000CC: EB000046    ;       BL    ClearScreen                              ; into r0
000000D0: EA000006    ;       B     vSupervisor_return
000000D4:             ; 
000000D4:             ; SVC_BUTT  EQU  5
000000D4:             ; SVCRoutine5                                          ; get curent button pressed
000000D4: EB000069    ;       BL    GetButton                                ; into r0
000000D8: EA000004    ;       B     vSupervisor_return
000000DC:             ; 
000000DC:             ; 
000000DC:             ; SVC_RKEY  EQU  6
000000DC:             ; SVCRoutine6                                          ; get curent key from buffer
000000DC: EB0000E1    ;       BL    ReadKey                                  ; into r0
000000E0: EA000002    ;       B     vSupervisor_return
000000E4:             ; 
000000E4:             ; SVC_NOT   EQU  7
000000E4:             ; SVCRoutine7                                          ; send r0 to buzzer
000000E4: EB0000E5    ;       BL    SendNote                                 ; into r0
000000E8: EA000000    ;       B     vSupervisor_return
000000EC:             ; 
000000EC:             ; 
000000EC:             ; SVCUnknown
000000EC: EAFFFFFE    ;       B     .                                        ; unknown SVC call, hang..
000000F0:             ; 
000000F0:             ; vSupervisor_return
000000F0:             ;       ; return to user code
000000F0:             ; 
000000F0:             ;       ; return saved value of saved flags
000000F0: E8BD0800    ;       POP   {r11}; containing saved spsr
000000F4: E16FF00B    ;       MSR   SPSR, r11
000000F8:             ; 
000000F8: E8BD5800    ;       POP   {LR,r12,r11}
000000FC: E1B0F00E    ;       MOVS  PC, LR ; return to user code here
00000100:             ; 
00000100:             ; ;-- this include should define symbols :
00000100:             ; ;--                                      GetTimer    ; a procedure to return 
00000100:             ; ;--                                                  ; curent timer value in r0 
00000100:             ; GET   KernelTimer.s
00000100:             ; ;-----------------------------------------------------------------------------;
00000100:             ; ;---                 LAB KERNEL V1.0                                       ---;
00000100:             ; ;---                 ---------------                                       ---;
00000100:             ; ;---                 Timer                                                 ---;
00000100:             ; ;--- Author: James W Peach                                                 ---;
00000100:             ; ;-----------------------------------------------------------------------------;
00000100:             ; 
00000100:             ; ;-- this include should define symbols :
00000100:             ; ;--                                      GetTimer    ; a procedure to return 
00000100:             ; ;--                                                  ; curent timer value in r0 
00000100:             ; 
00000100:             ; TimerMemLoc   EQU   0x10000008
00000100:             ; GetTimer
00000100: E28F0CFF    ;         ADRL  r0, TimerMemLoc
00000104: E28008FF    ; 
00000108: E280040F    ; 
0000010C: E5500000    ;         LDRB  r0, [r0]
00000110: E1A0F00E    ;         MOV   PC, LR
00000114:             ; 
00000114:             ; 
00000114:             ; ;-- this include defines procedures to interface the KernelLCD
00000114:             ; GET   KernelLCD.s
00000114:             ; ;-----------------------------------------------------------------------------;
00000114:             ; ;---                 LAB KERNEL V1.0                                       ---;
00000114:             ; ;---                 ---------------                                       ---;
00000114:             ; ;---                 Kernel LDC Manager                                    ---;
00000114:             ; ;--- Author: James W Peach                                                 ---;
00000114:             ; ;-----------------------------------------------------------------------------;
00000114:             ; 
00000114:             ; ;-- this include defines procedures to interface the KernelLCD
00000114:             ; 
00000114:             ; ;-- LITERALS
00000114:             ; LCD_Data        EQU 0x10000000
00000114:             ; LCD_Control_O   EQU 0x4
00000114:             ; 
00000114:             ; ENABLE          EQU 0x01
00000114:             ; REGSEL          EQU 0x02
00000114:             ; READNW          EQU 0x04
00000114:             ;               
00000114:             ; BACKLIGHT       EQU 0x20
00000114:             ; CONTROL_CHAR    EQU 0x20
00000114:             ; CLEAR           EQU 0x01
00000114:             ; 
00000114:             ; ;---------------------------
00000114:             ; ;procedure PrintChar(R0=char)
00000114:             ; ; prints a single char on the LCD
00000114:             ; ;---------------------------
00000114:             ; PrintChar
00000114: E92D4102    ;         PUSH{LR,r1,r8}
00000118:             ;         ;load Bdata and control pointers        
00000118: E3A08201    ;         MOV   r8, #LCD_Data
0000011C:             ;         ; wait for device
0000011C: EB000041    ;         BL    IOWait
00000120:             ; 
00000120:             ;         ; load control reg
00000120: E5981004    ;         LDR   r1, [r8, #LCD_Control_O]
00000124:             ;         ; setup = set write set REGSEL unset READNW
00000124: E3C11004    ;         BIC   r1, r1, #(READNW)
00000128:             ; 
00000128: E3500020    ;         CMP   r0, #CONTROL_CHAR
0000012C:             ; 
0000012C: A3811002    ;         ORRGE r1, r1, #(REGSEL) ; for data reg
00000130: B3C11002    ;         BICLT r1, r1, #(REGSEL) ; for control reg
00000134: BB000018    ;         BLLT  ConvertControlChar; convert control char to operation
00000138:             ;         
00000138: E5881004    ;         STR   r1, [r8, #LCD_Control_O]
0000013C:             ; 
0000013C:             ;         ; set data
0000013C: E5080000    ;         STR   r0, [r8]
00000140:             ; 
00000140:             ;         ; strobe enable
00000140: E3811001    ;         ORR   r1, r1, #(ENABLE)
00000144: E5881004    ;         STR   r1, [r8, #LCD_Control_O]
00000148:             ; 
00000148:             ;         ; strobe off        
00000148: E3C11001    ;         BIC   r1, r1, #(ENABLE)
0000014C: E5881004    ;         STR   r1, [r8, #LCD_Control_O]
00000150:             ; 
00000150:             ;         ;print char
00000150: E8BD4102    ;         POP{LR,r1,r8}
00000154: E1A0F00E    ;         MOV   PC,LR
00000158:             ; ;---------------------------
00000158:             ; 
00000158:             ; ;---------------------------
00000158:             ; ;procedure PrintString(R0=string-pointer)
00000158:             ; ; prints a \0 terminated string pointed to by string-pointer
00000158:             ; ;---------------------------
00000158:             ; PrintString
00000158: E92D4002    ;         PUSH{LR,r1}
0000015C: E1A01000    ;         MOV   r1, r0
00000160:             ; PrintString_repeat
00000160: E4D10001    ;         LDRB  r0, [r1], #1     ;load char + post increment
00000164:             ;         ;check for termination char -> jump to end
00000164: E3500000    ;         CMP   r0,#0
00000168:             ; 
00000168: 0A000001    ;         BEQ PrintString_end
0000016C: EBFFFFE8    ;         BL PrintChar           ; PrintChar(R0=curent-char)
00000170: EAFFFFFA    ;         B  PrintString_repeat
00000174:             ; PrintString_end
00000174: E8BD4002    ;         POP{LR,r1}
00000178: E1A0F00E    ;         MOV   PC,LR
0000017C:             ; ;---------------------------
0000017C:             ; 
0000017C:             ; EnableBacklight
0000017C: E92D4101    ;         PUSH{LR,r0,r8}
00000180:             ;         
00000180:             ;         ;load Bdata and control pointers        
00000180: E3A08201    ;         MOV   r8, #LCD_Data    
00000184:             ;  
00000184:             ;         ; wait for io to be ready 
00000184: EB000027    ;         BL    IOWait
00000188:             ;         
00000188: E5980004    ;         LDR   r0, [r8, #LCD_Control_O]
0000018C: E3800020    ;         ORR   r0, r0, #(BACKLIGHT)
00000190: E5880004    ;         STR   r0, [r8, #LCD_Control_O]
00000194:             ; 
00000194: E8BD4101    ;         POP{LR,r0,r8}
00000198: E1A0F00E    ;         MOV   PC,LR
0000019C:             ;       
0000019C:             ; ;---------------------------
0000019C:             ; ;procedure ConvertControlChar(r0=char OUTPUT)
0000019C:             ; ; converts the char in r0 to an operation
0000019C:             ; ;
0000019C:             ; CURSOR_POS_MASK EQU 0x7F
0000019C:             ; 
0000019C:             ; MOVE_CUR_OFFSET EQU 0x80
0000019C:             ; LINE      EQU 0x40
0000019C:             ; BEGIN_LINE_CLEAR EQU 0x1F
0000019C:             ; 
0000019C:             ; LINE_FEED EQU 0x0A
0000019C:             ; CARR_RET  EQU 0x0D
0000019C:             ; ;---------------------------
0000019C:             ; ConvertControlChar
0000019C: E92D4006    ;         PUSH{LR,r1,r2}
000001A0:             ;       
000001A0: EB000020    ;         BL    IOWait    ; wait for io to be ready to read
000001A4: E1A02000    ;         MOV   r2, r0
000001A8:             ; 
000001A8:             ;         ; load curent control
000001A8: E5980004    ;         LDR   r0, [r8, #LCD_Control_O]
000001AC:             ;         ; set read&control, unset enable
000001AC: E3800004    ;         ORR   r0, r0, #(READNW)
000001B0: E3C00003    ;         BIC   r0, r0, #(ENABLE | REGSEL)
000001B4: E5880004    ;         STR   r0, [r8, #LCD_Control_O]      
000001B8:             ;         ; enable bus too
000001B8: E3800001    ;         ORR   r0, r0, #(ENABLE)
000001BC: E5880004    ;         STR   r0, [r8, #LCD_Control_O]
000001C0:             ;         ; read data
000001C0: E5181000    ;         LDR   r1, [r8]      
000001C4:             ;         ; disable bus
000001C4: E3C00001    ;         BIC   r0, r0, #(ENABLE)
000001C8: E5880004    ;         STR   r0, [r8, #LCD_Control_O]
000001CC:             ; 
000001CC:             ;         ; mask data to get curent cursor position
000001CC: E201107F    ;         AND   r1, r1, #CURSOR_POS_MASK
000001D0:             ;  
000001D0:             ;         ; if line feed char then add line length to pos
000001D0: E352000A    ;         CMP   r2, #LINE_FEED
000001D4: 02810040    ;         ADDEQ r0, r1, #(LINE)
000001D8:             ;         
000001D8:             ;         ; if carrege return clear line pos bits XXXX0000 
000001D8: E352000D    ;         CMP   r2, #CARR_RET
000001DC: 03C1001F    ;         BICEQ r0, r1, #(BEGIN_LINE_CLEAR)        
000001E0:             ; 
000001E0:             ;         ; add command to position
000001E0: E2800080    ;         ADD   r0, r0, #(MOVE_CUR_OFFSET)
000001E4:             ; 
000001E4: E8BD4006    ;         POP{LR,r1,r2}
000001E8: E1A0F00E    ;         MOV PC,LR
000001EC:             ; ;---------------------------
000001EC:             ; 
000001EC:             ; ;---------------------------
000001EC:             ; ;procedure ClearScreen
000001EC:             ; ; clears the screen and places cursor in top left corner
000001EC:             ; ;---------------------------
000001EC:             ; ClearScreen
000001EC: E92D4301    ;         PUSH{LR,r0,r9,r8}
000001F0:             ;         ;load data and control pointers        
000001F0: E3A08201    ;         MOV   r8, #LCD_Data
000001F4:             ;         ;wait for device
000001F4: EB00000B    ;         BL    IOWait
000001F8:             ;         ;clear screen
000001F8:             ;         
000001F8: E5980004    ;         LDR   r0, [r8, #LCD_Control_O]
000001FC:             ;         ; set control
000001FC: E3C00006    ;         BIC   r0, r0, #(READNW | REGSEL)
00000200: E5880004    ;         STR   r0, [r8, #LCD_Control_O]
00000204:             ;         ; set data
00000204: E3A00001    ;         MOV   r0, #CLEAR
00000208: E5080000    ;         STR   r0, [r8]
0000020C:             ;         
0000020C:             ;         ; strobe enable on
0000020C: E5980004    ;         LDR   r0, [r8, #LCD_Control_O]
00000210: E3800001    ;         ORR   r0, r0, #(ENABLE)
00000214: E5880004    ;         STR   r0, [r8, #LCD_Control_O]
00000218:             ; 
00000218:             ;         ; strobe enable off
00000218: E3C00001    ;         BIC   r0, r0, #(ENABLE)
0000021C: E5880004    ;         STR   r0, [r8, #LCD_Control_O]
00000220:             ; 
00000220: E8BD4301    ;         POP{LR,r0,r9,r8}
00000224: E1A0F00E    ;         MOV   PC,LR
00000228:             ; ;---------------------------
00000228:             ; 
00000228:             ; ;---------------------------
00000228:             ; ;procedure IOWait
00000228:             ; ; waits for the io to be ready
00000228:             ; ;---------------------------
00000228:             ; IOWait
00000228: E92D0003    ;         PUSH{r0,r1}
0000022C:             ; 
0000022C:             ; IOWait_repeat
0000022C:             ; 
0000022C:             ;         ; load curent control
0000022C: E5980004    ;         LDR   r0, [r8, #LCD_Control_O]
00000230:             ; 
00000230:             ;         ; set read&control, unset enable
00000230: E3800004    ;         ORR   r0, r0, #(READNW)
00000234: E3C00003    ;         BIC   r0, r0, #(ENABLE | REGSEL)
00000238: E5880004    ;         STR   r0, [r8, #LCD_Control_O]
0000023C:             ;         
0000023C:             ;         ; enable bus too
0000023C: E3800001    ;         ORR   r0, r0, #(ENABLE)
00000240: E5880004    ;         STR   r0, [r8, #LCD_Control_O]
00000244:             ;     
00000244:             ;         ; read data
00000244: E5181000    ;         LDR   r1, [r8]      
00000248:             ;             
00000248:             ;         ; disable bus
00000248: E3C00001    ;         BIC   r0, r0, #(ENABLE)
0000024C: E5880004    ;         STR   r0, [r8, #LCD_Control_O]
00000250:             ; 
00000250:             ;         ; test bit 7 is low else repeat
00000250: E2111080    ;         ANDS  r1, r1, #0x80
00000254: 1AFFFFF4    ;         BNE   IOWait_repeat
00000258:             ; 
00000258: E8BD0003    ;         POP{r0,r1}
0000025C: E1A0F00E    ;         MOV   PC,LR
00000260:             ; 
00000260:             ; ;--------------------------
00000260:             ; ;procedure LCDInit
00000260:             ; ; initialises control signals
00000260:             ; ;--------------------------
00000260:             ; LCDInit
00000260: E92D0101    ;         PUSH{r0,r8}
00000264: E3A08201    ;         MOV   r8, #LCD_Data
00000268:             ; 
00000268: E3A00000    ;         MOV   r0, #0
0000026C: E5080000    ;         STR   r0, [r8] ; init data
00000270: E3A00010    ;         MOV   r0, #0x00000010
00000274: E5880004    ;         STR   r0, [r8, #LCD_Control_O] ; init control
00000278:             ; 
00000278: E8BD0101    ;         POP{r0,r8}
0000027C: E1A0F00E    ;         MOV   PC, LR
00000280:             ; ;--------------------------
00000280:             ; 
00000280:             ; ;-- this include defines procedures to interface the buttons
00000280:             ; GET   KernelButtons.s
00000280:             ; ;-----------------------------------------------------------------------------;
00000280:             ; ;---                 LAB KERNEL V1.0                                       ---;
00000280:             ; ;---                 ---------------                                       ---;
00000280:             ; ;---                 Button io                                             ---;
00000280:             ; ;--- Author: James W Peach                                                 ---;
00000280:             ; ;-----------------------------------------------------------------------------;
00000280:             ; ;-- this include defines procedures to interface the buttons
00000280:             ; 
00000280:             ; 
00000280:             ; ;-- LITERALS
00000280:             ; ButtonsMem    EQU 0x10000004
00000280:             ; ButtonsMask   EQU 0x3
00000280:             ; ButtonsShift  EQU 0x6
00000280:             ; 
00000280:             ; GetButton
00000280:             ;       ;load
00000280: E28F0F5F    ;       ADRL  r0, ButtonsMem
00000284: E2800BFF    ; 
00000288: E28007FF    ; 
0000028C: E2800303    ; 
00000290: E5500000    ;       LDRB  r0, [r0]
00000294: E1A00320    ;       MOV   r0, r0, LSR #ButtonsShift
00000298: E2000003    ;       AND   r0, r0, #ButtonsMask
0000029C: E1A0F00E    ;       MOV   PC,LR
000002A0:             ;       
000002A0:             ; 
000002A0:             ; ;-- this include defines procedures to handle interrupts:
000002A0:             ; ;--                                  InitialiseInterrupts : inits interrupts
000002A0:             ; ;--                                  InterruptHandler     : handles interupt
000002A0:             ; GET   KernelInt.s
000002A0:             ; ;-----------------------------------------------------------------------------;
000002A0:             ; ;---                 LAB KERNEL V1.0                                       ---;
000002A0:             ; ;---                 ---------------                                       ---;
000002A0:             ; ;---                                                                       ---;
000002A0:             ; ;--- Author: James W Peach                                                 ---;
000002A0:             ; ;-----------------------------------------------------------------------------;
000002A0:             ; ;-- this include defines procedures to handle interrupts:
000002A0:             ; ;--                                  InitialiseInterrupts : inits interrupts
000002A0:             ; ;--                                  InterruptHandler     : handles interupt
000002A0:             ; 
000002A0:             ; ;-- LITERALS
000002A0:             ; TIMER_COMP_BYTE   EQU   0x1000_000C        ; timer compare mem loc
000002A0:             ; INTERUPT_BITS_O   EQU   0xC                ; interrupt flags offset
000002A0:             ; INTERUPT_ENABLE_O EQU   0x10               ; interrupt enable offset
000002A0:             ; TIMER_ENABLE_BIT  EQU   0b0000_0001        ; CPSR timer enable bit
000002A0:             ; 
000002A0:             ; TIMER_DELAY       EQU   5
000002A0:             ; TIMER_MAX         EQU   0xFF
000002A0:             ; 
000002A0:             ; INTTERUPT_TIMER_MASK EQU 0b0000_0001
000002A0:             ; 
000002A0:             ; ;-- VARIABLES
000002A0: 00000000    ; TIMER_CURENT_VALUE      DEFW  0 
000002A4:             ; 
000002A4:             ; ;-------------------------
000002A4:             ; ;-- procedure  InitialiseInterrupts
000002A4:             ; ;-- 
000002A4:             ; ;-- initialises hardware interrupts
000002A4:             ; ;-- sets timer interrupt to interrupt @100ms 
000002A4:             ; InitialiseInterrupts
000002A4: E92D4003    ;       PUSH {r0,r1,LR}
000002A8:             ; 
000002A8: E28F1F57    ;       ADRL  r1, TIMER_COMP_BYTE
000002AC: E2811BFF    ; 
000002B0: E28117FF    ; 
000002B4: E2811303    ; 
000002B8: EBFFFF90    ;       BL    GetTimer
000002BC:             ;       ; set timer interrupt to be NOW+@100ms
000002BC: E2800005    ;       ADD   r0, r0, #TIMER_DELAY
000002C0: E5010000    ;       STR   r0, [r1]
000002C4:             ; 
000002C4:             ;       ; disable all interrupts except timer
000002C4: E3A00001    ;       MOV   r0, #(TIMER_ENABLE_BIT)
000002C8: E5810010    ;       STR   r0, [r1, #INTERUPT_ENABLE_O]
000002CC:             ; 
000002CC: E8BD4003    ;       POP  {r0,r1,LR}
000002D0: E1A0F00E    ;       MOV   PC, LR
000002D4:             ; 
000002D4:             ; ; called when an interrupt happens
000002D4:             ; ; should pass to each handler in turn to decide who should process event
000002D4:             ; InterruptHandler
000002D4:             ;       ; load interrupt port into r0
000002D4: E92D4001    ;       PUSH {LR,r0}
000002D8: E28F0F4B    ;       ADRL r0, TIMER_COMP_BYTE
000002DC: E2800BFF    ; 
000002E0: E28007FF    ; 
000002E4: E2800303    ; 
000002E8: E5D0000C    ;       LDRB r0, [r0, #INTERUPT_BITS_O]
000002EC:             ;       ; work out what was triggered interupt
000002EC:             ; 
000002EC:             ;       ; BL list of handlers  ( only one handler at the moment )
000002EC: EB000001    ;       BL    InterruptTimer    ; handle timer intterupt if triggered
000002F0:             ; 
000002F0:             ; ; called at the end of the list of handlers if none found or
000002F0:             ; ; or jumped to if a handler successfully completes
000002F0:             ; InterruptComplete
000002F0:             ;       ; exit handler
000002F0: E8BD4001    ;       POP {LR,r0}
000002F4: E25EF004    ;       SUBS  PC, LR, #4        ; return to user land
000002F8:             ; 
000002F8:             ; InterruptTimer
000002F8:             ;       ; test r0 for timer flags
000002F8: E3100001    ;       TST   r0, #(INTTERUPT_TIMER_MASK)
000002FC: 01A0F00E    ;       MOVEQ PC, LR                              ; if no flag return
00000300:             ;       ; else do timer stuff
00000300: E92D4002    ;       PUSH{LR,r1}
00000304:             ; 
00000304:             ;       ; load offset point
00000304: E28F1CFD    ;       ADRL  r1, TIMER_COMP_BYTE
00000308: E28118FF    ; 
0000030C: E281140F    ; 
00000310:             ; 
00000310:             ;       ;clear interrupt bit
00000310: E3C00001    ;       BIC   r0, r0, #(INTTERUPT_TIMER_MASK)
00000314: E5C1000C    ;       STRB  r0, [r1, #INTERUPT_BITS_O]
00000318:             ; 
00000318:             ;       ; store incrament in timer
00000318: E51F0080    ;       LDR   r0, TIMER_CURENT_VALUE
0000031C: E2800001    ;       ADD   r0, r0, #1
00000320: E50F0088    ;       STR   r0, TIMER_CURENT_VALUE
00000324:             ; 
00000324:             ;       ; set next timer point
00000324: EBFFFF75    ;       BL    GetTimer
00000328: E2800005    ;       ADD   r0, r0, #TIMER_DELAY
0000032C:             ;       ; if timer is too large subtract MAX
0000032C: E35000FF    ;       CMP   r0, #TIMER_MAX
00000330: 824000FF    ;       SUBHI r0, r0, #TIMER_MAX
00000334:             ;       ; wrap timer compare value
00000334: E5010000    ;       STR   r0, [r1]
00000338:             ; 
00000338: EB000010    ;       BL    KeyboardScan
0000033C:             ; 
0000033C:             ;       ; return
0000033C: E8BD4002    ;       POP{LR,r1}
00000340: EAFFFFEA    ;       B     InterruptComplete
00000344:             ; 
00000344:             ; ;-- this include defines procedures to handle keyboard scanning:
00000344:             ; ;--                                  KeyboardScan         : called periodically
00000344:             ; ;--                                                       : to handle key read
00000344:             ; ;--                                  KeyboardInit         : called to init the
00000344:             ; ;--                                                       : keyboard
00000344:             ; GET   KernelKeyboard.s
00000344:             ; ;-----------------------------------------------------------------------------;
00000344:             ; ;---                 LAB KERNEL V1.0                                       ---;
00000344:             ; ;---                 ---------------                                       ---;
00000344:             ; ;---                 Button io                                             ---;
00000344:             ; ;--- Author: James W Peach                                                 ---;
00000344:             ; ;-----------------------------------------------------------------------------;
00000344:             ; 
00000344:             ; ;-- this include defines procedures to handle keyboard scanning:
00000344:             ; ;--                                  KeyboardScan         : called periodically
00000344:             ; ;--                                                       : to handle key read
00000344:             ; ;--                                  KeyboardInit         : called to init the
00000344:             ; ;--                                                       : keyboard
00000344:             ; 
00000344: FFFFFFFF    ; LAST_KEY_PRESSED    DEFW    -1
00000348: FFFFFFFF    ; CURENT_KEY          DEFW    -1
0000034C: 00000000    ; CURENT_KEY_TIME     DEFW    0
00000350:             ; 
00000350:             ; ;-- LITERALS
00000350:             ; KEY_DAT     EQU 0x2000_0002
00000350:             ; KEY_CON_O   EQU 0x1
00000350:             ; KEY_CON_VAL EQU 0x1F
00000350:             ; KEYHLD_TIME EQU 2
00000350:             ; 
00000350:             ; ;--- KEYMAP   : a mapping from digits to keys and vice versa
00000350:             ; 
00000350:             ; ;-- line 0
00000350:             ; KEY_LINE_0    EQU 0b0010_0000
00000350:             ; KEY_3   EQU   ('3')
00000350:             ; KEY_6   EQU   ('6')
00000350:             ; KEY_9   EQU   ('9')
00000350:             ; KEY_H   EQU   ('#')
00000350:             ; 
00000350:             ; ;-- line 1
00000350:             ; KEY_LINE_1    EQU 0b0100_0000
00000350:             ; KEY_2   EQU   ('2')
00000350:             ; KEY_5   EQU   ('5')
00000350:             ; KEY_8   EQU   ('8')
00000350:             ; KEY_0   EQU   ('0')
00000350:             ; 
00000350:             ; ;-- line 2
00000350:             ; KEY_LINE_2    EQU 0b1000_0000
00000350:             ; KEY_1   EQU   ('1')
00000350:             ; KEY_4   EQU   ('4')
00000350:             ; KEY_7   EQU   ('7')
00000350:             ; KEY_S   EQU   ('*')
00000350:             ; 
00000350:             ; ;-- line keys
00000350:             ; LINE_KEY_0 EQU 0b0000_0001
00000350:             ; LINE_KEY_1 EQU 0b0000_0010
00000350:             ; LINE_KEY_2 EQU 0b0000_0100
00000350:             ; LINE_KEY_3 EQU 0b0000_1000
00000350:             ; 
00000350:             ; KeyboardInit
00000350: E92D0003    ;         PUSH{r0,r1}
00000354: E3E00000    ;         MOV   r0, #-1
00000358: E54F001C    ;         STRB  r0, LAST_KEY_PRESSED
0000035C: E54F001C    ;         STRB  r0, CURENT_KEY
00000360:             ; 
00000360: E28F009A    ;         ADRL  r0, KEY_DAT
00000364: E2800BFF    ; 
00000368: E28007FF    ; 
0000036C: E2800307    ; 
00000370: E3A0101F    ;         MOV   r1, #KEY_CON_VAL
00000374: E5C01001    ;         STRB  r1, [r0, #KEY_CON_O]
00000378:             ; 
00000378: E8BD0003    ;         POP{r0,r1}
0000037C: E1A0F00E    ;         MOV   PC, LR
00000380:             ; 
00000380:             ; 
00000380:             ; ;---------------------
00000380:             ; ;--procedure KeyboardScan
00000380:             ; ;-- scans the keys for presses and updates LAST_KEY_PRESSED
00000380:             ; ;-
00000380:             ; ;- puudeocode
00000380:             ; ;-
00000380:             ; ;-  SCAN
00000380:             ; ;---  SCAN LINE 1
00000380:             ; ;-----  if any key is pressed save key in reg key_down
00000380:             ; ;---  SCAN LINE 2
00000380:             ; ;-----  if any key is pressed save key in reg key_down
00000380:             ; ;---  SCAN LINE 3
00000380:             ; ;-----  if any key is pressed save key in reg key_down
00000380:             ; ;-
00000380:             ; ;-  ACCUMULATE
00000380:             ; ;---  IF key_down is CURENT_KEY
00000380:             ; ;-----  INCR  CURENT_KEY_TIME
00000380:             ; ;---  ELSE
00000380:             ; ;-----  ZERO CURENT_KEY_TIME
00000380:             ; ;-----  SET CURENT_KEY = key_down
00000380:             ; ;-
00000380:             ; ;-  IF CURENT_KEY_TIME > threshold
00000380:             ; ;---  UPDATE #LAST_KEY_PRESSED
00000380:             ; ;---  CLEAR CURENT_KEY and CURENT_KEY
00000380:             ; ;---------------------
00000380:             ; 
00000380:             ; 
00000380:             ; KeyboardScan
00000380: E92D4006    ;         PUSH{LR,r1,r2}
00000384: EB00000D    ;         BL    GetKeyDown                ; get current key
00000388: E51F2044    ;         LDR   r2, CURENT_KEY_TIME       ; store and update CURENT_KEY_TIME
0000038C: E51F104C    ;         LDR   r1, CURENT_KEY            ; and CURENT_KEY
00000390: E1500001    ;         CMP   r0, r1
00000394: 02822001    ;         ADDEQ r2, r2, #1
00000398: 13A02000    ;         MOVNE r2, #0
0000039C: 11A01000    ;         MOVNE r1, r0
000003A0: E50F205C    ;         STR   r2, CURENT_KEY_TIME
000003A4: E50F1064    ;         STR   r1, CURENT_KEY
000003A8:             ; 
000003A8: E3520002    ;         CMP   r2, #KEYHLD_TIME
000003AC: 850F1070    ;         STRHI r1, LAST_KEY_PRESSED      ; store new key if down for longer than
000003B0: 83E02000    ;         MOVHI r2, #-1                   ;... LAST_KEY_PRESSED
000003B4: 850F2074    ;         STRHI r2, CURENT_KEY
000003B8:             ; 
000003B8: E8BD4006    ;         POP{LR,r1,r2}
000003BC: E1A0F00E    ;         MOV   PC, LR
000003C0:             ; ;---------------------
000003C0:             ; 
000003C0:             ; 
000003C0:             ; ;---------------------
000003C0:             ; ;--procedure GetKeyDown(R0=key out)
000003C0:             ; ;-- returns the key that is currently down or -1 if no key is down
000003C0:             ; ;-- 
000003C0:             ; ;-- scans each row in turn and gets the last key pressed 
000003C0:             ; GetKeyDown
000003C0: E92D0006    ;         PUSH{r1,r2}
000003C4: E3E02000    ;         MOV   r2, #-1
000003C8: E28F0032    ;         ADRL  r0, KEY_DAT
000003CC: E2800BFF    ; 
000003D0: E28007FF    ; 
000003D4: E2800307    ; 
000003D8:             ; 
000003D8:             ;         ; scan line 0
000003D8: E3A01020    ;         MOV   r1, #KEY_LINE_0
000003DC: E5401000    ;         STRB  r1, [r0]
000003E0: E5501000    ;         LDRB  r1, [r0]
000003E4:             ; 
000003E4: E3110001    ;         TST   r1, #LINE_KEY_0
000003E8: 13A02033    ;         MOVNE r2, #KEY_3
000003EC: E3110002    ;         TST   r1, #LINE_KEY_1
000003F0: 13A02036    ;         MOVNE r2, #KEY_6
000003F4: E3110004    ;         TST   r1, #LINE_KEY_2
000003F8: 13A02039    ;         MOVNE r2, #KEY_9
000003FC: E3110008    ;         TST   r1, #LINE_KEY_3
00000400: 13A02023    ;         MOVNE r2, #KEY_H
00000404:             ; 
00000404:             ;         ; scan line 1
00000404: E3A01040    ;         MOV   r1, #KEY_LINE_1
00000408: E5401000    ;         STRB  r1, [r0]
0000040C: E5501000    ;         LDRB  r1, [r0]
00000410:             ; 
00000410: E3110001    ;         TST   r1, #LINE_KEY_0
00000414: 13A02032    ;         MOVNE r2, #KEY_2
00000418: E3110002    ;         TST   r1, #LINE_KEY_1
0000041C: 13A02035    ;         MOVNE r2, #KEY_5
00000420: E3110004    ;         TST   r1, #LINE_KEY_2
00000424: 13A02038    ;         MOVNE r2, #KEY_8
00000428: E3110008    ;         TST   r1, #LINE_KEY_3
0000042C: 13A02030    ;         MOVNE r2, #KEY_0
00000430:             ; 
00000430:             ;         ; scan line 2
00000430: E3A01080    ;         MOV   r1, #KEY_LINE_2
00000434: E5401000    ;         STRB  r1, [r0]
00000438: E5501000    ;         LDRB  r1, [r0]
0000043C:             ; 
0000043C: E3110001    ;         TST   r1, #LINE_KEY_0
00000440: 13A02031    ;         MOVNE r2, #KEY_1
00000444: E3110002    ;         TST   r1, #LINE_KEY_1
00000448: 13A02034    ;         MOVNE r2, #KEY_4
0000044C: E3110004    ;         TST   r1, #LINE_KEY_2
00000450: 13A02037    ;         MOVNE r2, #KEY_7
00000454: E3110008    ;         TST   r1, #LINE_KEY_3
00000458: 13A0202A    ;         MOVNE r2, #KEY_S
0000045C:             ; 
0000045C:             ;         ; move result into r0
0000045C: E1A00002    ;         MOV   r0, r2
00000460:             ; 
00000460: E8BD0006    ;         POP{r1,r2}
00000464: E1A0F00E    ;         MOV   PC, LR
00000468:             ; 
00000468:             ; ;----------------------------
00000468:             ; ;--ReadKey(r0=key pressed)
00000468:             ; ;-- reads a key from the buffer and marks it read
00000468:             ; ;----------------------------
00000468:             ; ReadKey 
00000468: E92D0002    ;         PUSH{r1}
0000046C: E51F0130    ;         LDR   r0, LAST_KEY_PRESSED
00000470: E3E01000    ;         MOV   r1, #-1
00000474: E50F1138    ;         STR   r1, LAST_KEY_PRESSED
00000478: E8BD0002    ;         POP{r1}
0000047C: E1A0F00E    ;         MOV PC, LR
00000480:             ; 
00000480:             ; ;-- this include defines procedures to handle sending notes to the buzzer
00000480:             ; ;--                                  SendNote             : called periodically
00000480:             ; ;--                                                       : to handle key read
00000480:             ; ;--                                  BuzzInit             : initialize buzzer
00000480:             ; GET   KernelBuzzer.s
00000480:             ; ;-----------------------------------------------------------------------------;
00000480:             ; ;---                 LAB KERNEL V1.0                                       ---;
00000480:             ; ;---                 ---------------                                       ---;
00000480:             ; ;---                 Button io                                             ---;
00000480:             ; ;--- Author: James W Peach                                                 ---;
00000480:             ; ;-----------------------------------------------------------------------------;
00000480:             ; 
00000480:             ; ;-- this include defines procedures to handle sending notes to the buzzer
00000480:             ; ;--                                  SendNote             : called periodically
00000480:             ; ;--                                                       : to handle key read
00000480:             ; ;--                                  BuzzInit             : initialize buzzer
00000480:             ; 
00000480:             ; ;L------O-----A-----------------C----------------------------------------------;
00000480:             ; 
00000480:             ; NOTEPORTHI    EQU   0x2000_0000
00000480:             ; NOTEPORTLO_O  EQU   0x1
00000480:             ; NOT_NONE      EQU   0x0
00000480:             ; ;-------------------------------
00000480:             ; ;procedure SendNote(R0)
00000480:             ; SendNote
00000480: E92D4000    ;         PUSH  {LR}
00000484: E28FEFDD    ;         ADRL  r14, NOTEPORTHI
00000488: E28EEBFE    ; 
0000048C: E28EE7FF    ; 
00000490: E28EE307    ; 
00000494: E5CE0001    ;         STRB  r0, [r14, #NOTEPORTLO_O]  
00000498:             ;         ; shift right by 8 bits (one byte)
00000498: E1A00420    ;         LSR    R0, R0, #8
0000049C: E54E0000    ;         STRB  r0, [r14]  
000004A0: E8BD4000    ;         POP   {LR}
000004A4: E1A0F00E    ;         MOV   PC, LR
000004A8:             ; 
000004A8:             ; ;---------------
000004A8:             ; ;-- procedure PeripheralInitialise initialies perhiperals
000004A8:             ; PeripheralInitialise
000004A8: E92D4000    ;       PUSH  {LR}
000004AC: EBFFFF6B    ;       BL    LCDInit           ; init control signals
000004B0: EBFFFF31    ;       BL    EnableBacklight   ; enable backlight
000004B4: EBFFFF7A    ;       BL    InitialiseInterrupts; init interrupts
000004B8: EBFFFF4B    ;       BL    ClearScreen       ; clear screen
000004BC: EBFFFFA3    ;       BL    KeyboardInit      ; init keyboard
000004C0: E8BD4000    ;       POP   {LR}
000004C4: E1A0F00E    ;       MOV   PC, LR
000004C8:             ; ;---------------
000004C8:             ; 
000004C8:             ; ;---------------    
000004C8:             ; ;-    deals with prefetch aborts
000004C8:             ; vPreAbort
000004C8: EAFFFFFE    ;       B   .
000004CC:             ; ;---------------
000004CC:             ;       
000004CC:             ; ;---------------    
000004CC:             ; ;-    deals with data aborts
000004CC:             ; vDataAbort
000004CC: EAFFFFFE    ;       B   .
000004D0:             ; ;---------------
000004D0:             ;       
000004D0:             ; ;---------------    
000004D0:             ; ;-    deals with interrupt handling
000004D0:             ; vIRQ  
000004D0: EAFFFF7F    ;       B   InterruptHandler
000004D4:             ; ;---------------
000004D4:             ;       
000004D4:             ; ;---------------    
000004D4:             ; ;-    deals with fast interrupt handling
000004D4:             ; vFIQ
000004D4: EAFFFFFE    ;       B   .
000004D8:             ; ;---------------
000004D8:             ;      
000004D8:             ; GET   UserProgram.s
000004D8:             ; ;-----------------------------------------------------------------------------;
000004D8:             ; ;-----                Final Project - Multi octave keyboard               ----;
000004D8:             ; ;--- Author: James W Peach                                                 ---;
000004D8:             ; ;-----------------------------------------------------------------------------;
000004D8:             ; 
000004D8:             ; ;------------------------
000004D8:             ; ;-- literals
000004D8:             ; OCTAVE_LOW      EQU  0
000004D8:             ; OCTAVE_HIGH     EQU  1
000004D8:             ; SOUND_NEUTERAL  EQU  0
000004D8:             ; SOUND_SHARP     EQU  1
000004D8:             ; NOKEY           EQU  -1
000004D8:             ; ;------------------------
000004D8:             ; ;-- variables memory
000004D8: 00000000    ; MODE_OCTAVE DEFW 0x0
000004DC: 00000000    ; MODE_SOUND  DEFW 0x0
000004E0:             ; ;------------------------
000004E0:             ; ;- UserProgram
000004E0:             ; ;- 
000004E0:             ; ;L------O-----A-----------------C----------------------------------------------;
000004E0:             ; Main
000004E0:             ;         ; initialise variables: 
000004E0: E3A00000    ;         MOV   r0, #OCTAVE_LOW
000004E4: E50F0014    ;         STR   r0, MODE_OCTAVE
000004E8:             ; 
000004E8: E3A00000    ;         MOV   r0, #SOUND_NEUTERAL
000004EC: E50F0018    ;         STR   r0, MODE_SOUND
000004F0:             ; 
000004F0:             ; MainL   ; main loop:
000004F0:             ; 
000004F0: EB00001C    ;         BL    DrawScreen
000004F4:             ; 
000004F4: EF000006    ;         SVC   SVC_RKEY          ; returns key or NOKEY
000004F8: E3700001    ;         CMP   r0, #NOKEY
000004FC: 03A00000    ;         MOVEQ r0, #NOT_NONE     ; if none then dont sound note anymore
00000500:             ;         ;SVCEQ SVC_NOT
00000500: 0AFFFFFA    ;         BEQ   MainL
00000504:             ;         
00000504:             ;         ;if key is * then enter lower octave
00000504: E3500023    ;         CMP   r0, #KEY_H
00000508: 0A00000B    ;         BEQ   SharpToggle
0000050C:             ;         ;if key is 0 then enter upper octave
0000050C: E3500030    ;         CMP   r0, #KEY_0
00000510: 0A00000F    ;         BEQ   UpperOctave
00000514:             ;         ;if key is # then toggle sharp mode      
00000514: E350002A    ;         CMP   r0, #KEY_S
00000518: 0A00000F    ;         BEQ   LowerOctave
0000051C:             ;         
0000051C:             ;         ;if none of the above then change note to the key #('0') to #('8')
0000051C:             ;         ; calculate freq val
0000051C:             ;         ; sound correct key
0000051C:             ; 
0000051C: E2400031    ;         SUB   r0, r0, #('1')
00000520: E3500038    ;         CMP   r0, #('8')
00000524: 8AFFFFF1    ;         BHI   MainL
00000528:             ; 
00000528:             ;         ; load modes
00000528: E51F1054    ;         LDR   r1, MODE_SOUND
0000052C: E51F205C    ;         LDR   r2, MODE_OCTAVE
00000530:             ;         ; calculate note value to send to buzzer
00000530: EB00000F    ;         BL    GetNoteVal
00000534:             ;         ; send note to buzzer hardware
00000534: EF000007    ;         SVC   SVC_NOT
00000538:             ; 
00000538:             ; 
00000538:             ;         ; repeat
00000538: EAFFFFEC    ;         B     MainL             ; repeat main loop
0000053C:             ; 
0000053C:             ; SharpToggle
0000053C: E51F0068    ;         LDR   r0, MODE_SOUND
00000540: E3500000    ;         CMP   r0, #SOUND_NEUTERAL
00000544: 03A00001    ;         MOVEQ r0, #SOUND_SHARP
00000548: 13A00000    ;         MOVNE r0, #SOUND_NEUTERAL
0000054C: E50F0078    ;         STR   r0, MODE_SOUND
00000550: EAFFFFE6    ;         B     MainL             ; repeat main loop
00000554:             ; 
00000554:             ; UpperOctave
00000554: E3A00001    ;         MOV   r0,  #OCTAVE_HIGH
00000558: EA000000    ;         B     ChangeOctave
0000055C:             ; LowerOctave 
0000055C: E3A00000    ;         MOV   r0,  #OCTAVE_LOW
00000560:             ; ChangeOctave
00000560:             ;         ; change octave to the one in r0
00000560: E50F0090    ;         STR   r0, MODE_OCTAVE
00000564: EAFFFFE1    ;         B     MainL             ; repeat main loop
00000568:             ; 
00000568:             ; DrawScreen
00000568: E92D0007    ;         PUSH{r0,r1,r2}
0000056C:             ; 
0000056C:             ;         ;SVC   SVC_CLER
0000056C:             ; 
0000056C:             ;         ; load modes
0000056C:             ;         ;LDR   r1, MODE_SOUND
0000056C:             ;         ;CMP   r1, #SOUND_SHARP
0000056C:             ;         ;ADRLEQ r0, SHARP_TAG
0000056C:             ;         ;ADRLNE r0, NORM_TAG
0000056C:             ;         ;SVC   SVC_STR
0000056C:             ; 
0000056C:             ;         ;LDR   r2, MODE_OCTAVE
0000056C:             ;         ;CMP   r2, #OCTAVE_HIGH
0000056C:             ;         ;ADRLEQ r0, HIGH_TAG
0000056C:             ;         ;ADRLNE r0, LOW_TAG
0000056C:             ;         ;SVC   SVC_STR
0000056C:             ; 
0000056C: E8BD0007    ;         POP{r0,r1,r2}
00000570: E1A0F00E    ;         MOV   PC,LR
00000574:             ; 
00000574:             ; 
00000574:             ; ;-------------------------------
00000574:             ; ;procedure GetNoteVal(R0=note / value OUT,R1=sharp,R2=octave)
00000574:             ; ; returns the value to be sent to the buzzer hardware
00000574:             ; ;-
00000574:             ; ;- low+0    sharp+7
00000574:             ; ;- high+12  not+0
00000574:             ; ;-
00000574:             ; ;-------------------------------
00000574:             ; GetNoteVal
00000574: E92D0002    ;         PUSH  {r1}
00000578: E3510001    ;         CMP   r1, #SOUND_SHARP
0000057C: 02800007    ;         ADDEQ r0, r0, #SHARP_OFFSET 
00000580: E3520001    ;         CMP   r2, #OCTAVE_HIGH
00000584: 0280000C    ;         ADDEQ r0, r0, #OCTHI_OFFSET
00000588: E28F1008    ;         ADR   r1, NotesTable
0000058C: E7910080    ;         LDR   r0, [r1, r0, LSL #0x1]
00000590: E8BD0002    ;         POP   {r1}
00000594: E1A0F00E    ;         MOV   PC, LR
00000598:             ; ;-------------------------------
00000598:             ; 
00000598:             ; ; auto generated code from: 
00000598:             ; ;https://docs.google.com/spreadsheets/d/1umkPg9fAEzA4-UB3L3uZDeU6IOwrI8WIphsAInxvuwo/edit?usp=s
                      ; haring
00000598:             ; SHARP_OFFSET  EQU 7
00000598:             ; OCTHI_OFFSET  EQU 12
00000598:             ; NotesTable
00000598: DD          ;         DEFB 0x1DDD
00000599: 9A          ;         DEFB 0x1A9A
0000059A: B3          ;         DEFB 0x17B3
0000059B: 5F          ;         DEFB 0x165F
0000059C: EE          ;         DEFB 0x13EE
0000059D: C1          ;         DEFB 0x11C1
0000059E: D2          ;         DEFB 0x0FD2
0000059F: 2F          ;         DEFB 0x1C2F
000005A0: 00          ;         DEFB 0x0000
000005A1: 00          ;         DEFB 0x0000
000005A2: 1D          ;         DEFB 0x151D
000005A3: 00          ;         DEFB 0x0000
000005A4: C2          ;         DEFB 0x10C2
000005A5: 00          ;         DEFB 0x0000
000005A6: EE          ;         DEFB 0x0EEE
000005A7: 4D          ;         DEFB 0x0D4D
000005A8: DA          ;         DEFB 0x0BDA
000005A9: 2F          ;         DEFB 0x0B2F
000005AA: F7          ;         DEFB 0x09F7
000005AB: E1          ;         DEFB 0x08E1
000005AC: E9          ;         DEFB 0x07E9
000005AD: 18          ;         DEFB 0x0E18
000005AE: 00          ;         DEFB 0x0000
000005AF: 00          ;         DEFB 0x0000
000005B0: 8F          ;         DEFB 0x0A8F
000005B1: 68          ;         DEFB 0x0968
000005B2: 61          ;         DEFB 0x0861
000005B3: 00          ;         DEFB 0x0000
000005B4:             ; 
000005B4:             ; ALIGN
000005B4:             ; SHARP_TAG
000005B4: 53 68 61 72 ;         DEFB "Sharp "
000005B8: 70 20       ; 
000005BA:             ; NORM_TAG
000005BA: 4E 6F 72 6D ;         DEFB "Norm "
000005BE: 20          ; 
000005BF:             ; LOW_TAG
000005BF: 4C 6F 77 20 ;         DEFB "Low "
000005C3:             ; HIGH_TAG
000005C3: 48 69 67 68 ;         DEFB "High "
000005C7: 20          ; 
000005C8:             ;  
000005C8:             ; ;---------------
000005C8:             ; ;-    stack areas
000005C8:             ;       ALIGN
000005C8:             ;       DEFS  4096
000015C8:             ; sUSR  ; user mode stack area
000015C8:             ;       DEFS  4096
000025C8:             ; sSVC  ; svc mode stack area
000025C8:             ;       DEFS  4096
000035C8:             ; sABO  ; abort mode stack area
000035C8:             ;       DEFS  4096
000045C8:             ; sUDE  ; undefined mode stack area
000045C8:             ;       DEFS  4096
000055C8:             ; sIRQ  ; interrupt mode stack area
000055C8:             ;       DEFS  4096
000065C8:             ; sFIQ  ; fast interrupt mode stack area
000065C8:             ; ;---------------
000065C8:             ; 
000065C8:             ; 
000065C8:             ; ; FIN

Symbol Table: Labels
: SPSR_SYSMODENI                    000000DF  Value
: SPSR_SVCMODENI                    000000D3  Value
: SPSR_IRQMODENI                    000000D2  Value
: SPSR_USER                         00000050  Value
: vReset                            00000020  Local -- ARM
: vUndef                            00000068  Local -- ARM
: SVC_OP_MASK                       FF000000  Value
: vSupervisor                       0000006C  Local -- ARM
: SVCRoutines                       00000090  Local -- ARM
: SVCRoutines_END                   000000AC  Local -- ARM
: SVCMax                            00000007  Value
: SVC_HALT                          00000000  Value
: SVCRoutine0                       000000B0  Local -- ARM
: SVC_CHAR                          00000001  Value
: SVCRoutine1                       000000B4  Local -- ARM
: SVC_STR                           00000002  Value
: SVCRoutine2                       000000BC  Local -- ARM
: SVC_TIME                          00000003  Value
: SVCRoutine3                       000000C4  Local -- ARM
: SVC_CLER                          00000004  Value
: SVCRoutine4                       000000CC  Local -- ARM
: SVC_BUTT                          00000005  Value
: SVCRoutine5                       000000D4  Local -- ARM
: SVC_RKEY                          00000006  Value
: SVCRoutine6                       000000DC  Local -- ARM
: SVC_NOT                           00000007  Value
: SVCRoutine7                       000000E4  Local -- ARM
: SVCUnknown                        000000EC  Local -- ARM
: vSupervisor_return                000000F0  Local -- ARM
: TimerMemLoc                       10000008  Value
: GetTimer                          00000100  Local -- ARM
: LCD_Data                          10000000  Value
: LCD_Control_O                     00000004  Value
: ENABLE                            00000001  Value
: REGSEL                            00000002  Value
: READNW                            00000004  Value
: BACKLIGHT                         00000020  Value
: CONTROL_CHAR                      00000020  Value
: CLEAR                             00000001  Value
: PrintChar                         00000114  Local -- ARM
: PrintString                       00000158  Local -- ARM
: PrintString_repeat                00000160  Local -- ARM
: PrintString_end                   00000174  Local -- ARM
: EnableBacklight                   0000017C  Local -- ARM
: CURSOR_POS_MASK                   0000007F  Value
: MOVE_CUR_OFFSET                   00000080  Value
: LINE                              00000040  Value
: BEGIN_LINE_CLEAR                  0000001F  Value
: LINE_FEED                         0000000A  Value
: CARR_RET                          0000000D  Value
: ConvertControlChar                0000019C  Local -- ARM
: ClearScreen                       000001EC  Local -- ARM
: IOWait                            00000228  Local -- ARM
: IOWait_repeat                     0000022C  Local -- ARM
: LCDInit                           00000260  Local -- ARM
: ButtonsMem                        10000004  Value
: ButtonsMask                       00000003  Value
: ButtonsShift                      00000006  Value
: GetButton                         00000280  Local -- ARM
: TIMER_COMP_BYTE                   1000000C  Value
: INTERUPT_BITS_O                   0000000C  Value
: INTERUPT_ENABLE_O                 00000010  Value
: TIMER_ENABLE_BIT                  00000001  Value
: TIMER_DELAY                       00000005  Value
: TIMER_MAX                         000000FF  Value
: INTTERUPT_TIMER_MASK              00000001  Value
: TIMER_CURENT_VALUE                000002A0  Local -- ARM
: InitialiseInterrupts              000002A4  Local -- ARM
: InterruptHandler                  000002D4  Local -- ARM
: InterruptComplete                 000002F0  Local -- ARM
: InterruptTimer                    000002F8  Local -- ARM
: LAST_KEY_PRESSED                  00000344  Local -- ARM
: CURENT_KEY                        00000348  Local -- ARM
: CURENT_KEY_TIME                   0000034C  Local -- ARM
: KEY_DAT                           20000002  Value
: KEY_CON_O                         00000001  Value
: KEY_CON_VAL                       0000001F  Value
: KEYHLD_TIME                       00000002  Value
: KEY_LINE_0                        00000020  Value
: KEY_3                             00000033  Value
: KEY_6                             00000036  Value
: KEY_9                             00000039  Value
: KEY_H                             00000023  Value
: KEY_LINE_1                        00000040  Value
: KEY_2                             00000032  Value
: KEY_5                             00000035  Value
: KEY_8                             00000038  Value
: KEY_0                             00000030  Value
: KEY_LINE_2                        00000080  Value
: KEY_1                             00000031  Value
: KEY_4                             00000034  Value
: KEY_7                             00000037  Value
: KEY_S                             0000002A  Value
: LINE_KEY_0                        00000001  Value
: LINE_KEY_1                        00000002  Value
: LINE_KEY_2                        00000004  Value
: LINE_KEY_3                        00000008  Value
: KeyboardInit                      00000350  Local -- ARM
: KeyboardScan                      00000380  Local -- ARM
: GetKeyDown                        000003C0  Local -- ARM
: ReadKey                           00000468  Local -- ARM
: NOTEPORTHI                        20000000  Value
: NOTEPORTLO_O                      00000001  Value
: NOT_NONE                          00000000  Value
: SendNote                          00000480  Local -- ARM
: PeripheralInitialise              000004A8  Local -- ARM
: vPreAbort                         000004C8  Local -- ARM
: vDataAbort                        000004CC  Local -- ARM
: vIRQ                              000004D0  Local -- ARM
: vFIQ                              000004D4  Local -- ARM
: OCTAVE_LOW                        00000000  Value
: OCTAVE_HIGH                       00000001  Value
: SOUND_NEUTERAL                    00000000  Value
: SOUND_SHARP                       00000001  Value
: NOKEY                             FFFFFFFF  Value
: MODE_OCTAVE                       000004D8  Local -- ARM
: MODE_SOUND                        000004DC  Local -- ARM
: Main                              000004E0  Local -- ARM
: MainL                             000004F0  Local -- ARM
: SharpToggle                       0000053C  Local -- ARM
: UpperOctave                       00000554  Local -- ARM
: LowerOctave                       0000055C  Local -- ARM
: ChangeOctave                      00000560  Local -- ARM
: DrawScreen                        00000568  Local -- ARM
: GetNoteVal                        00000574  Local -- ARM
: SHARP_OFFSET                      00000007  Value
: OCTHI_OFFSET                      0000000C  Value
: NotesTable                        00000598  Local -- ARM
: SHARP_TAG                         000005B4  Local -- ARM
: NORM_TAG                          000005BA  Local -- ARM
: LOW_TAG                           000005BF  Local -- ARM
: HIGH_TAG                          000005C3  Local -- ARM
: sUSR                              000015C8  Local -- ARM
: sSVC                              000025C8  Local -- ARM
: sABO                              000035C8  Local -- ARM
: sUDE                              000045C8  Local -- ARM
: sIRQ                              000055C8  Local -- ARM
: sFIQ                              000065C8  Local -- ARM
