KMD
00000000:             ; ;-----------------------------------------------------------------------------;
00000000:             ; ;---                 LAB KERNEL V1.0                                       ---;
00000000:             ; ;---                 ---------------                                       ---;
00000000:             ; ;-----------------------------------------------------------------------------;
00000000:             ; 
00000000:             ; ;---------------
00000000:             ; ;---  EXCEPTION VECTOR TABLE
00000000: EA000006    ;       B     vReset
00000004: EA000010    ;       B     vUndef
00000008: EA000010    ;       B     vSupervisor    
0000000C: EA00008C    ;       B     vPreAbort
00000010: EA00008C    ;       B     vDataAbort
00000014: EAFFFFFE    ;       B     .           ; unused vector
00000018: EA00008B    ;       B     vIRQ        ; interrupt request
0000001C: EA00008B    ;       B     vFIQ        ; fast interrupt request
00000020:             ; ;---------------
00000020:             ; 
00000020:             ; ;---------------
00000020:             ; ;- KERNEL MODE LITERALS
00000020:             ; SPSR_SYSMODENI  EQU  0xDF
00000020:             ; SPSR_USERNI     EQU  0xD0
00000020:             ; ;---------------
00000020:             ; 
00000020:             ; 
00000020:             ; ;---------------
00000020:             ; ;-    deals with resets and initialises kernel and then calls user code @main
00000020:             ; vReset
00000020:             ;       ;- initialise supervisor mode stack
00000020: E28FDF95    ;       ADRL  SP,  sSVC
00000024: E28DDA02    ; 
00000028:             ;       ;- switch to system mode
00000028: E3A0E0DF    ;       MOV   LR, #(SPSR_SYSMODENI)     ; system mode no interrupts
0000002C: E121F00E    ;       MSR   CPSR_c, LR
00000030:             ;       ;- initialise user mode stack
00000030: E28FDF91    ;       ADRL  SP,  sUSR
00000034: E28DDA01    ; 
00000038:             ;       ;- initialise perhiperals
00000038: EB00007B    ;       BL    PerhiperalInitialize
0000003C:             ;       ;- switch to user mode
0000003C: E3A0E0D0    ;       MOV   LR, #(SPSR_USERNI)      ; user mode no interrupts
00000040: E121F00E    ;       MSR   CPSR_c, LR
00000044:             ;       ;- call user code
00000044: E28FEF82    ;       ADR   LR,  Main
00000048: E1B0F00E    ;       MOVS  PC,  LR
0000004C:             ; ;---------------
0000004C:             ;       
0000004C:             ; ;---------------    
0000004C:             ; ;-    deals with undefined instructions
0000004C:             ; vUndef
0000004C: EAFFFFFE    ;       B   .
00000050:             ; ;---------------
00000050:             ;       
00000050:             ; ;---------------    
00000050:             ; ;-    deals with supervisor calls
00000050:             ; SVC_OP_MASK EQU 0xFF000000
00000050:             ; vSupervisor
00000050: E92D5800    ;       PUSH  {LR,r12,r11}
00000054:             ; 
00000054:             ;       ; save spsr incase nested SVC calls
00000054: E14FB000    ;       MRS   r11, SPSR ;save spsr in reg
00000058: E92D0800    ;       PUSH  {r11}
0000005C:             ; 
0000005C: E51EC004    ;       LDR   r12, [LR, #-4]  ; load actual SVC instruction
00000060: E3CCC4FF    ;       BIC   r12,  r12,  #(SVC_OP_MASK) ; mask off opcode
00000064:             ;       ; supervisor call 
00000064: E35C0004    ;       CMP   r12, #SVCMax
00000068: 8A00000F    ;       BHI   SVCUnknown
0000006C:             ; 
0000006C: E28FB010    ;       ADR   r11, SVCRoutines
00000070: E79BF10C    ;       LDR   PC, [r11,r12 LSL #2]
00000074:             ; 
00000074:             ; vSupervisor_return
00000074:             ;       ; return to user code
00000074:             ; 
00000074:             ;       ; return saved value of saved flags
00000074: E8BD0800    ;       POP   {r11}; containing saved spsr
00000078: E16FF00B    ;       MSR   SPSR, r11
0000007C:             ; 
0000007C: E8BD5800    ;       POP   {LR,r12,r11}
00000080: E1B0F00E    ;       MOVS  PC, LR ; return to user code here
00000084:             ; 
00000084:             ; ;-- this include should define symbols:
00000084:             ; ;--                                    SVCRoutines   ; a table of routines
00000084:             ; ;--                                                  ; each should return to: 
00000084:             ; ;--                                                  ; vSupervisor_return
00000084:             ; ;--                                    SVCMax        ; the max number of opcode
00000084:             ; ;--                                    SVCUnknown    ; report the error proc
00000084:             ; GET   KernelSVC.s
00000084:             ; ;-----------------------------------------------------------------------------;
00000084:             ; ;---                 LAB KERNEL V1.0                                       ---;
00000084:             ; ;---                 ---------------                                       ---;
00000084:             ; ;---                 SVC calls                                             ---;
00000084:             ; ;-----------------------------------------------------------------------------;
00000084:             ; 
00000084:             ; ;-- this include should define symbols:
00000084:             ; ;--                                    SVCRoutines   ; a table of routines
00000084:             ; ;--                                                  ; each should return to: 
00000084:             ; ;--                                                  ; vSupervisor_return
00000084:             ; ;--                                    SVCMax        ; the max number of opcode
00000084:             ; ;--                                    SVCUnknown    ; report the error proc
00000084:             ; 
00000084:             ; SVCRoutines
00000084: 00000094    ;       DEFW SVCRoutine0
00000088: 00000098    ;       DEFW SVCRoutine1
0000008C: 000000A0    ;       DEFW SVCRoutine2
00000090: 000000A8    ;       DEFW SVCRoutine3
00000094:             ; SVCRoutines_END
00000094:             ; SVCMax EQU (SVCRoutines_END - SVCRoutines)/4
00000094:             ; 
00000094:             ; 
00000094:             ; SVCRoutine0 
00000094: EAFFFFFE    ;       B    .                                         ; user program end     
00000098:             ; 
00000098:             ; SVCRoutine1                                          ; print char r0 is char
00000098:             ;       ;procedure PrintChar(R0=char)
00000098: EB000004    ;       BL    PrintChar
0000009C: EAFFFFF4    ;       B     vSupervisor_return                        
000000A0:             ; 
000000A0:             ; SVCRoutine2                                          ; print string r0 is
000000A0: EB000014    ;       BL    PrintString                              ; string pointer
000000A4: EAFFFFF2    ;       B     vSupervisor_return                       
000000A8:             ; 
000000A8:             ; SVCRoutine3
000000A8: EAFFFFF1    ;       B     vSupervisor_return     
000000AC:             ; 
000000AC:             ; SVCUnknown
000000AC: EAFFFFF0    ;       B     vSupervisor_return
000000B0:             ; 
000000B0:             ; ;-- this include defines procedures to interface the KernelLCD
000000B0:             ; GET   KernelLCD.s
000000B0:             ; ;------------------------------------------------------------------------
000000B0:             ; ;            IO Library
000000B0:             ; ;           JWP 2015 - COMP227
000000B0:             ; ;           VERSION 1.1 for use in kernal
000000B0:             ; ;
000000B0:             ; ; contains io utilities
000000B0:             ; ;  incl write string, char, clear screen, convert control char to op
000000B0:             ; ;
000000B0:             ; ; Last modified 28/Jan, 04/Feb
000000B0:             ; ;
000000B0:             ; ;
000000B0:             ; ; Known bugs: None
000000B0:             ; ;
000000B0:             ; ;------------------------------------------------------------------------
000000B0:             ; 
000000B0:             ; 
000000B0:             ; LCD_Data    EQU 0x10000000
000000B0:             ; LCD_Control EQU 0x10000004
000000B0:             ; 
000000B0:             ; ENABLE  EQU   0x01
000000B0:             ; REGSEL  EQU   0x02
000000B0:             ; READNW  EQU   0x04
000000B0:             ;               
000000B0:             ; BACKLIGHT  EQU   0x20
000000B0:             ; CONTROL_CHAR EQU 0x20
000000B0:             ; CLEAR   EQU   0x01
000000B0:             ; 
000000B0:             ; ;---------------------------
000000B0:             ; ;procedure PrintChar(R0=char)
000000B0:             ; ; prints a single char on the LCD
000000B0:             ; ;---------------------------
000000B0:             ; PrintChar
000000B0: E92D4302    ;         PUSH{LR,r1,r8,r9}
000000B4:             ;         ;load Bdata and control pointers        
000000B4: E3A08201    ;         MOV   r8, #LCD_Data
000000B8: E3A09241    ;         MOV   r9, #LCD_Control
000000BC:             ;         ; wait for device
000000BC: EB000043    ;         BL    IOWait
000000C0:             ; 
000000C0:             ;         ; load control reg
000000C0: E5191000    ;         LDR   r1, [r9]
000000C4:             ;         ; setup = set write set REGSEL unset READNW
000000C4: E3C11004    ;         BIC   r1, r1, #(READNW)
000000C8:             ; 
000000C8: E3500020    ;         CMP   r0, #CONTROL_CHAR
000000CC:             ; 
000000CC: A3811002    ;         ORRGE r1, r1, #(REGSEL) ; for data reg
000000D0: B3C11002    ;         BICLT r1, r1, #(REGSEL) ; for control reg
000000D4: BB000019    ;         BLLT  ConvertControlChar; convert control char to operation
000000D8:             ;         
000000D8: E5091000    ;         STR   r1, [r9]
000000DC:             ; 
000000DC:             ;         ; set data
000000DC: E5080000    ;         STR   r0, [r8]
000000E0:             ; 
000000E0:             ;         ; strobe enable
000000E0: E3811001    ;         ORR   r1, r1, #(ENABLE)
000000E4: E5091000    ;         STR   r1, [r9]
000000E8:             ; 
000000E8:             ;         ; strobe off        
000000E8: E3C11001    ;         BIC   r1, r1, #(ENABLE)
000000EC: E5091000    ;         STR   r1, [r9]
000000F0:             ; 
000000F0:             ;         ;print char
000000F0: E8BD4302    ;         POP{LR,r1,r8,r9}
000000F4: E1A0F00E    ;         MOV   PC,LR
000000F8:             ; ;---------------------------
000000F8:             ; 
000000F8:             ; ;---------------------------
000000F8:             ; ;procedure PrintString(R0=string-pointer)
000000F8:             ; ; prints a \0 terminated string pointed to by string-pointer
000000F8:             ; ;---------------------------
000000F8:             ; PrintString
000000F8: E92D4002    ;         PUSH{LR,r1}
000000FC: E1A01000    ;         MOV   r1, r0
00000100:             ; PrintString_repeat
00000100: E4D10001    ;         LDRB  r0, [r1], #1     ;load char + post increment
00000104:             ;         ;check for termination char -> jump to end
00000104: E3500000    ;         CMP   r0,#0
00000108:             ; 
00000108: 0A000001    ;         BEQ PrintString_end
0000010C: EBFFFFE7    ;         BL PrintChar           ; PrintChar(R0=curent-char)
00000110: EAFFFFFA    ;         B  PrintString_repeat
00000114:             ; PrintString_end
00000114: E8BD4002    ;         POP{LR,r1}
00000118: E1A0F00E    ;         MOV   PC,LR
0000011C:             ; ;---------------------------
0000011C:             ; 
0000011C:             ; EnableBacklight
0000011C: E92D4101    ;         PUSH{LR,r0,r8}
00000120:             ;         
00000120:             ;         ;load Bdata and control pointers        
00000120: E3A08201    ;         MOV   r8, #LCD_Data
00000124: E3A09241    ;         MOV   r9, #LCD_Control       
00000128:             ;  
00000128:             ;         ; wait for io to be ready 
00000128: EB000028    ;         BL    IOWait
0000012C:             ;         
0000012C: E5190000    ;         LDR   r0, [r9]
00000130: E3800020    ;         ORR   r0, r0, #(BACKLIGHT)
00000134: E5090000    ;         STR   r0, [r9]
00000138:             ; 
00000138: E8BD4101    ;         POP{LR,r0,r8}
0000013C: E1A0F00E    ;         MOV   PC,LR
00000140:             ;       
00000140:             ; ;---------------------------
00000140:             ; ;procedure ConvertControlChar(r0=char OUTPUT)
00000140:             ; ; converts the char in r0 to an operation
00000140:             ; ;
00000140:             ; CURSOR_POS_MASK EQU 0x7F
00000140:             ; 
00000140:             ; MOVE_CUR_OFFSET EQU 0x80
00000140:             ; LINE      EQU 0x40
00000140:             ; BEGIN_LINE_CLEAR EQU 0x1F
00000140:             ; 
00000140:             ; LINE_FEED EQU 0x0A
00000140:             ; CARR_RET  EQU 0x0D
00000140:             ; ;
00000140:             ; ;---------------------------
00000140:             ; ConvertControlChar
00000140: E92D4006    ;         PUSH{LR,r1,r2}
00000144:             ;       
00000144: EB000021    ;         BL    IOWait    ; wait for io to be ready to read
00000148: E1A02000    ;         MOV   r2, r0
0000014C:             ; 
0000014C:             ;         ; load curent control
0000014C: E5190000    ;         LDR   r0, [r9]
00000150:             ;         ; set read&control, unset enable
00000150: E3800004    ;         ORR   r0, r0, #(READNW)
00000154: E3C00003    ;         BIC   r0, r0, #(ENABLE | REGSEL)
00000158: E5090000    ;         STR   r0, [r9]        
0000015C:             ;         ; enable bus too
0000015C: E3800001    ;         ORR   r0, r0, #(ENABLE)
00000160: E5090000    ;         STR   r0, [r9]
00000164:             ;         ; read data
00000164: E5181000    ;         LDR   r1, [r8]      
00000168:             ;         ; disable bus
00000168: E3C00001    ;         BIC   r0, r0, #(ENABLE)
0000016C: E5090000    ;         STR   r0, [r9]
00000170:             ; 
00000170:             ;         ; mask data to get curent cursor position
00000170: E201107F    ;         AND   r1, r1, #CURSOR_POS_MASK
00000174:             ;  
00000174:             ;         ; if line feed char then add line length to pos
00000174: E352000A    ;         CMP   r2, #LINE_FEED
00000178: 02810040    ;         ADDEQ r0, r1, #(LINE)
0000017C:             ;         
0000017C:             ;         ; if carrege return clear line pos bits XXXX0000 
0000017C: E352000D    ;         CMP   r2, #CARR_RET
00000180: 03C1001F    ;         BICEQ r0, r1, #(BEGIN_LINE_CLEAR)        
00000184:             ; 
00000184:             ;         ; add command to position
00000184: E2800080    ;         ADD   r0, r0, #(MOVE_CUR_OFFSET)
00000188:             ; 
00000188: E8BD4006    ;         POP{LR,r1,r2}
0000018C: E1A0F00E    ;         MOV PC,LR
00000190:             ; ;---------------------------
00000190:             ; 
00000190:             ; ;---------------------------
00000190:             ; ;procedure ClearScreen
00000190:             ; ; clears the screen and places cursor in top left corner
00000190:             ; ;---------------------------
00000190:             ; ClearScreen
00000190: E92D4301    ;         PUSH{LR,r0,r9,r8}
00000194:             ;         ;load data and control pointers        
00000194: E3A08201    ;         MOV   r8, #LCD_Data
00000198: E3A09241    ;         MOV   r9, #LCD_Control
0000019C:             ;         ;wait for device
0000019C: EB00000B    ;         BL    IOWait
000001A0:             ;         ;clear screen
000001A0:             ;         
000001A0: E5190000    ;         LDR   r0, [r9]
000001A4:             ;         ; set control
000001A4: E3C00006    ;         BIC   r0, r0, #(READNW | REGSEL)
000001A8: E5090000    ;         STR   r0, [r9]
000001AC:             ;         ; set data
000001AC: E3A00001    ;         MOV   r0, #CLEAR
000001B0: E5080000    ;         STR   r0, [r8]
000001B4:             ;         
000001B4:             ;         ; strobe enable on
000001B4: E5190000    ;         LDR   r0, [r9]
000001B8: E3800001    ;         ORR   r0, r0, #(ENABLE)
000001BC: E5090000    ;         STR   r0, [r9]
000001C0:             ; 
000001C0:             ;         ; strobe enable off
000001C0: E3C00001    ;         BIC   r0, r0, #(ENABLE)
000001C4: E5090000    ;         STR   r0, [r9]
000001C8:             ; 
000001C8: E8BD4301    ;         POP{LR,r0,r9,r8}
000001CC: E1A0F00E    ;         MOV   PC,LR
000001D0:             ; ;---------------------------
000001D0:             ; 
000001D0:             ; ;---------------------------
000001D0:             ; ;procedure IOWait
000001D0:             ; ; waits for the io to be ready
000001D0:             ; ;---------------------------
000001D0:             ; IOWait
000001D0: E92D0003    ;         PUSH{r0,r1}
000001D4:             ; 
000001D4:             ; IOWait_repeat
000001D4:             ; 
000001D4:             ;         ; load curent control
000001D4: E5190000    ;         LDR   r0, [r9]
000001D8:             ; 
000001D8:             ;         ; set read&control, unset enable
000001D8: E3800004    ;         ORR   r0, r0, #(READNW)
000001DC: E3C00003    ;         BIC   r0, r0, #(ENABLE | REGSEL)
000001E0: E5090000    ;         STR   r0, [r9]
000001E4:             ;         
000001E4:             ;         ; enable bus too
000001E4: E3800001    ;         ORR   r0, r0, #(ENABLE)
000001E8: E5090000    ;         STR   r0, [r9]
000001EC:             ;     
000001EC:             ;         ; read data
000001EC: E5181000    ;         LDR   r1, [r8]      
000001F0:             ;             
000001F0:             ;         ; disable bus
000001F0: E3C00001    ;         BIC   r0, r0, #(ENABLE)
000001F4: E5090000    ;         STR   r0, [r9]
000001F8:             ; 
000001F8:             ;         ; test bit 7 is low else repeat
000001F8: E2111080    ;         ANDS  r1, r1, #0x80
000001FC: 1AFFFFF4    ;         BNE   IOWait_repeat
00000200:             ; 
00000200: E8BD0003    ;         POP{r0,r1}
00000204: E1A0F00E    ;         MOV   PC,LR
00000208:             ; 
00000208:             ; ;--------------------------
00000208:             ; ;procedure LCDInit
00000208:             ; ; initialises control signals
00000208:             ; ;--------------------------
00000208:             ; LCDInit
00000208: E92D0301    ;         PUSH{r0,r8,r9}
0000020C: E3A08201    ;         MOV   r8, #LCD_Data
00000210: E3A09241    ;         MOV   r9, #LCD_Control
00000214:             ; 
00000214: E3A00000    ;         MOV   r0, #0
00000218: E5080000    ;         STR   r0, [r8] ; init data
0000021C: E3A00010    ;         MOV   r0, #0x00000010
00000220: E5090000    ;         STR   r0, [r9] ; init control
00000224:             ; 
00000224: E8BD0301    ;         POP{r0,r8,r9}
00000228: E1A0F00E    ;         MOV   PC, LR
0000022C:             ; ;--------------------------
0000022C:             ; 
0000022C:             ; ;---------------
0000022C:             ; ;-- procedure PerhiperalInitialize initialies perhiperals
0000022C:             ; PerhiperalInitialize
0000022C: E92D4000    ;       PUSH  {LR}
00000230: EBFFFFF4    ;       BL    LCDInit           ; init control signals
00000234: EBFFFFB8    ;       BL    EnableBacklight   ; enable backlight
00000238: EBFFFFD4    ;       BL    ClearScreen       ; clear screen
0000023C: E8BD4000    ;       POP   {LR}
00000240: E1A0F00E    ;       MOV   PC, LR
00000244:             ; ;---------------
00000244:             ; 
00000244:             ; ;---------------    
00000244:             ; ;-    deals with prefetch aborts
00000244:             ; vPreAbort
00000244: EAFFFFFE    ;       B   .
00000248:             ; ;---------------
00000248:             ;       
00000248:             ; ;---------------    
00000248:             ; ;-    deals with data aborts
00000248:             ; vDataAbort
00000248: EAFFFFFE    ;       B   .
0000024C:             ; ;---------------
0000024C:             ;       
0000024C:             ; ;---------------    
0000024C:             ; ;-    deals with interrupt handling
0000024C:             ; vIRQ  
0000024C: EAFFFFFE    ;       B   .
00000250:             ; ;---------------
00000250:             ;       
00000250:             ; ;---------------    
00000250:             ; ;-    deals with fast interrupt handling
00000250:             ; vFIQ
00000250: EAFFFFFE    ;       B   .
00000254:             ; ;---------------
00000254:             ;      
00000254:             ; 
00000254:             ; GET   UserProgram.s
00000254:             ; ;-----------------------------------------------------------------------------;
00000254:             ; ;-----                    UserProgram Test                                ----;
00000254:             ; ;-----                    a program to test svc calls                     ----;
00000254:             ; ;-----------------------------------------------------------------------------;
00000254:             ; 
00000254:             ; Main    
00000254: E28F0004    ;         ADR   r0, StringTest   
00000258: EF000002    ;         SVC   2
0000025C: EF000000    ;         SVC   0
00000260:             ; 
00000260: 48 65 6C 6C ; StringTest      DEFB    "Hello Kernel 1.0\r\nGood Bye",0x00
00000264: 6F 20 4B 65 ; 
00000268: 72 6E 65 6C ; 
0000026C: 20 31 2E 30 ; 
00000270: 0D 0A 47 6F ; 
00000274: 6F 64 20 42 ; 
00000278: 79 65 00    ; 
0000027B:             ; 
0000027B:             ;  
0000027B:             ; ;---------------
0000027B:             ; ;-    stack areas
0000027C:             ;       ALIGN
0000027C:             ;       DEFS  4096
0000127C:             ; sUSR  ; user mode stack area
0000127C:             ;       DEFS  4096
0000227C:             ; sSVC  ; svc mode stack area
0000227C:             ;       DEFS  4096
0000327C:             ; sABO  ; abort mode stack area
0000327C:             ;       DEFS  4096
0000427C:             ; sUDE  ; undefined mode stack area
0000427C:             ;       DEFS  4096
0000527C:             ; sIRQ  ; interrupt mode stack area
0000527C:             ;       DEFS  4096
0000627C:             ; sFIQ  ; fast interrupt mode stack area
0000627C:             ; ;---------------
0000627C:             ; 
0000627C:             ; 
0000627C:             ; ; FIN
0000627C:             ; 

Symbol Table: Labels
: SPSR_SYSMODENI                    000000DF  Value
: SPSR_USERNI                       000000D0  Value
: vReset                            00000020  Local -- ARM
: vUndef                            0000004C  Local -- ARM
: SVC_OP_MASK                       FF000000  Value
: vSupervisor                       00000050  Local -- ARM
: vSupervisor_return                00000074  Local -- ARM
: SVCRoutines                       00000084  Local -- ARM
: SVCRoutines_END                   00000094  Local -- ARM
: SVCMax                            00000004  Value
: SVCRoutine0                       00000094  Local -- ARM
: SVCRoutine1                       00000098  Local -- ARM
: SVCRoutine2                       000000A0  Local -- ARM
: SVCRoutine3                       000000A8  Local -- ARM
: SVCUnknown                        000000AC  Local -- ARM
: LCD_Data                          10000000  Value
: LCD_Control                       10000004  Value
: ENABLE                            00000001  Value
: REGSEL                            00000002  Value
: READNW                            00000004  Value
: BACKLIGHT                         00000020  Value
: CONTROL_CHAR                      00000020  Value
: CLEAR                             00000001  Value
: PrintChar                         000000B0  Local -- ARM
: PrintString                       000000F8  Local -- ARM
: PrintString_repeat                00000100  Local -- ARM
: PrintString_end                   00000114  Local -- ARM
: EnableBacklight                   0000011C  Local -- ARM
: CURSOR_POS_MASK                   0000007F  Value
: MOVE_CUR_OFFSET                   00000080  Value
: LINE                              00000040  Value
: BEGIN_LINE_CLEAR                  0000001F  Value
: LINE_FEED                         0000000A  Value
: CARR_RET                          0000000D  Value
: ConvertControlChar                00000140  Local -- ARM
: ClearScreen                       00000190  Local -- ARM
: IOWait                            000001D0  Local -- ARM
: IOWait_repeat                     000001D4  Local -- ARM
: LCDInit                           00000208  Local -- ARM
: PerhiperalInitialize              0000022C  Local -- ARM
: vPreAbort                         00000244  Local -- ARM
: vDataAbort                        00000248  Local -- ARM
: vIRQ                              0000024C  Local -- ARM
: vFIQ                              00000250  Local -- ARM
: Main                              00000254  Local -- ARM
: StringTest                        00000260  Local -- ARM
: sUSR                              0000127C  Local -- ARM
: sSVC                              0000227C  Local -- ARM
: sABO                              0000327C  Local -- ARM
: sUDE                              0000427C  Local -- ARM
: sIRQ                              0000527C  Local -- ARM
: sFIQ                              0000627C  Local -- ARM
