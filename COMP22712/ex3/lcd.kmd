KMD
00000000:             ; ;------------------------------------------------------------------------
00000000:             ; ;            LCD Display
00000000:             ; ;           JWP 2015 - COMP227
00000000:             ; ;           VERSION 1.0
00000000:             ; ;
00000000:             ; ; prints strings on display and reacts to user input
00000000:             ; ;
00000000:             ; ;
00000000:             ; ; Last modified 28/Jan
00000000:             ; ;
00000000:             ; ;
00000000:             ; ; Known bugs: None
00000000:             ; ;
00000000:             ; ;------------------------------------------------------------------------
00000000: EA000057    ;         B     Main
00000004:             ; 
00000004:             ; ;---------------------------
00000004:             ; ; includes
00000004:             ; ;---------------------------
00000004:             ; GET     io.s
00000004:             ; ;------------------------------------------------------------------------
00000004:             ; ;            IO Library
00000004:             ; ;           JWP 2015 - COMP227
00000004:             ; ;           VERSION 1.0
00000004:             ; ;
00000004:             ; ; contains io utilities
00000004:             ; ;
00000004:             ; ;
00000004:             ; ; Last modified 28/Jan
00000004:             ; ;
00000004:             ; ;
00000004:             ; ; Known bugs: None
00000004:             ; ;
00000004:             ; ;------------------------------------------------------------------------
00000004:             ; 
00000004:             ; 
00000004:             ; LCD_Data    EQU 0x10000000
00000004:             ; LCD_Control EQU 0x10000004
00000004:             ; 
00000004:             ; ENABLE  EQU   0x01
00000004:             ; REGSEL  EQU   0x02
00000004:             ; READNW  EQU   0x04
00000004:             ;               
00000004:             ; BACKLIGHT  EQU   0x20
00000004:             ; CONTROL_CHAR EQU 0x20
00000004:             ; CLEAR   EQU   0x01
00000004:             ; 
00000004:             ; ;---------------------------
00000004:             ; ;procedure PrintChar(R0=char)
00000004:             ; ; prints a single char on the LCD
00000004:             ; ;---------------------------
00000004:             ; PrintChar
00000004: E92D4302    ;         PUSH{LR,r1,r8,r9}
00000008:             ;         ;load Bdata and control pointers        
00000008: E3A08201    ;         MOV   r8, #LCD_Data
0000000C: E3A09241    ;         MOV   r9, #LCD_Control
00000010:             ;         ; wait for device
00000010: EB000043    ;         BL    IOWait
00000014:             ;         ;TODO: check char in range  
00000014:             ; 
00000014:             ;         ; load control reg
00000014: E5191000    ;         LDR   r1, [r9]
00000018:             ;         ; setup = set write set REGSEL unset READNW
00000018: E3C11004    ;         BIC   r1, r1, #(READNW)
0000001C:             ; 
0000001C: E3500020    ;         CMP   r0, #CONTROL_CHAR
00000020:             ; 
00000020: A3811002    ;         ORRGE r1, r1, #(REGSEL) ; for data reg
00000024: B3C11002    ;         BICLT r1, r1, #(REGSEL) ; for control reg
00000028: BB000019    ;         BLLT  ConvertControlChar; convert control char to operation
0000002C:             ;         
0000002C: E5091000    ;         STR   r1, [r9]
00000030:             ; 
00000030:             ;         ; set data
00000030: E5080000    ;         STR   r0, [r8]
00000034:             ; 
00000034:             ;         ; strobe enable
00000034: E3811001    ;         ORR   r1, r1, #(ENABLE)
00000038: E5091000    ;         STR   r1, [r9]
0000003C:             ; 
0000003C:             ;         ; strobe off        
0000003C: E3C11001    ;         BIC   r1, r1, #(ENABLE)
00000040: E5091000    ;         STR   r1, [r9]
00000044:             ; 
00000044:             ;         ;print char
00000044: E8BD4302    ;         POP{LR,r1,r8,r9}
00000048: E1A0F00E    ;         MOV   PC,LR
0000004C:             ; ;---------------------------
0000004C:             ; 
0000004C:             ; ;---------------------------
0000004C:             ; ;procedure PrintString(R0=string-pointer)
0000004C:             ; ; prints a \0 terminated string pointed to by string-pointer
0000004C:             ; ;---------------------------
0000004C:             ; PrintString
0000004C: E92D4002    ;         PUSH{LR,r1}
00000050: E1A01000    ;         MOV   r1, r0
00000054:             ; PrintString_repeat
00000054: E4D10001    ;         LDRB  r0, [r1], #1     ;load char + post increment
00000058:             ;         ;check for termination char -> jump to end
00000058: E3500000    ;         CMP   r0,#0
0000005C:             ; 
0000005C: 0A000001    ;         BEQ PrintString_end
00000060: EBFFFFE7    ;         BL PrintChar           ; PrintChar(R0=curent-char)
00000064: EAFFFFFA    ;         B  PrintString_repeat
00000068:             ; PrintString_end
00000068: E8BD4002    ;         POP{LR,r1}
0000006C: E1A0F00E    ;         MOV   PC,LR
00000070:             ; ;---------------------------
00000070:             ; 
00000070:             ; EnableBacklight
00000070: E92D4101    ;         PUSH{LR,r0,r8}
00000074:             ;         
00000074:             ;         ;load Bdata and control pointers        
00000074: E3A08201    ;         MOV   r8, #LCD_Data
00000078: E3A09241    ;         MOV   r9, #LCD_Control       
0000007C:             ;  
0000007C:             ;         ; wait for io to be ready 
0000007C: EB000028    ;         BL    IOWait
00000080:             ;         
00000080: E5190000    ;         LDR   r0, [r9]
00000084: E3800020    ;         ORR   r0, r0, #(BACKLIGHT)
00000088: E5090000    ;         STR   r0, [r9]
0000008C:             ; 
0000008C: E8BD4101    ;         POP{LR,r0,r8}
00000090: E1A0F00E    ;         MOV   PC,LR
00000094:             ;       
00000094:             ; ;---------------------------
00000094:             ; ;procedure ConvertControlChar(r0=char OUTPUT)
00000094:             ; ; converts the char in r0 to an operation
00000094:             ; ;
00000094:             ; CURSOR_POS_MASK EQU 0x7F
00000094:             ; 
00000094:             ; MOVE_CUR_OFFSET EQU 0x80
00000094:             ; LINE      EQU 0x40
00000094:             ; BEGIN_LINE_CLEAR EQU 0x0F
00000094:             ; 
00000094:             ; LINE_FEED EQU 0x0A
00000094:             ; CARR_RET  EQU 0x0D
00000094:             ; ;
00000094:             ; ;---------------------------
00000094:             ; ConvertControlChar
00000094: E92D4006    ;         PUSH{LR,r1,r2}
00000098:             ;       
00000098: EB000021    ;         BL    IOWait    ; wait for io to be ready to read
0000009C: E1A02000    ;         MOV   r2, r0
000000A0:             ; 
000000A0:             ;         ; load curent control
000000A0: E5190000    ;         LDR   r0, [r9]
000000A4:             ;         ; set read&control, unset enable
000000A4: E3800004    ;         ORR   r0, r0, #(READNW)
000000A8: E3C00003    ;         BIC   r0, r0, #(ENABLE | REGSEL)
000000AC: E5090000    ;         STR   r0, [r9]        
000000B0:             ;         ; enable bus too
000000B0: E3800001    ;         ORR   r0, r0, #(ENABLE)
000000B4: E5090000    ;         STR   r0, [r9]
000000B8:             ;         ; read data
000000B8: E5181000    ;         LDR   r1, [r8]      
000000BC:             ;         ; disable bus
000000BC: E3C00001    ;         BIC   r0, r0, #(ENABLE)
000000C0: E5090000    ;         STR   r0, [r9]
000000C4:             ; 
000000C4:             ;         ; mask data to get curent cursor position
000000C4: E201107F    ;         AND   r1, r1, #CURSOR_POS_MASK
000000C8:             ;  
000000C8:             ;         ; if line feed char then add line length to pos
000000C8: E352000A    ;         CMP   r2, #LINE_FEED
000000CC: 02810040    ;         ADDEQ r0, r1, #(LINE)
000000D0:             ;         
000000D0:             ;         ; if carrege return clear line pos bits XXXX0000 
000000D0: E352000D    ;         CMP   r2, #CARR_RET
000000D4: 03C1000F    ;         BICEQ r0, r1, #(BEGIN_LINE_CLEAR)        
000000D8:             ; 
000000D8:             ;         ; add command to position
000000D8: E2800080    ;         ADD   r0, r0, #(MOVE_CUR_OFFSET)
000000DC:             ; 
000000DC: E8BD4006    ;         POP{LR,r1,r2}
000000E0: E1A0F00E    ;         MOV PC,LR
000000E4:             ; ;---------------------------
000000E4:             ; 
000000E4:             ; ;---------------------------
000000E4:             ; ;procedure ClearScreen
000000E4:             ; ; clears the screen and places cursor in top left corner
000000E4:             ; ;---------------------------
000000E4:             ; ClearScreen
000000E4: E92D4301    ;         PUSH{LR,r0,r9,r8}
000000E8:             ;         ;load data and control pointers        
000000E8: E3A08201    ;         MOV   r8, #LCD_Data
000000EC: E3A09241    ;         MOV   r9, #LCD_Control
000000F0:             ;         ;wait for device
000000F0: EB00000B    ;         BL    IOWait
000000F4:             ;         ;clear screen
000000F4:             ;         
000000F4: E5190000    ;         LDR   r0, [r9]
000000F8:             ;         ; set control
000000F8: E3C00006    ;         BIC   r0, r0, #(READNW | REGSEL)
000000FC: E5090000    ;         STR   r0, [r9]
00000100:             ;         ; set data
00000100: E3A00001    ;         MOV   r0, #CLEAR
00000104: E5080000    ;         STR   r0, [r8]
00000108:             ;         
00000108:             ;         ; strobe enable on
00000108: E5190000    ;         LDR   r0, [r9]
0000010C: E3800001    ;         ORR   r0, r0, #(ENABLE)
00000110: E5090000    ;         STR   r0, [r9]
00000114:             ; 
00000114:             ;         ; strobe enable off
00000114: E3C00001    ;         BIC   r0, r0, #(ENABLE)
00000118: E5090000    ;         STR   r0, [r9]
0000011C:             ; 
0000011C: E8BD4301    ;         POP{LR,r0,r9,r8}
00000120: E1A0F00E    ;         MOV   PC,LR
00000124:             ; ;---------------------------
00000124:             ; 
00000124:             ; ;---------------------------
00000124:             ; ;procedure IOWait
00000124:             ; ; waits for the io to be ready
00000124:             ; ;---------------------------
00000124:             ; IOWait
00000124: E92D0003    ;         PUSH{r0,r1}
00000128:             ; 
00000128:             ; IOWait_repeat
00000128:             ; 
00000128:             ;         ; load curent control
00000128: E5190000    ;         LDR   r0, [r9]
0000012C:             ; 
0000012C:             ;         ; set read&control, unset enable
0000012C: E3800004    ;         ORR   r0, r0, #(READNW)
00000130: E3C00003    ;         BIC   r0, r0, #(ENABLE | REGSEL)
00000134: E5090000    ;         STR   r0, [r9]
00000138:             ;         
00000138:             ;         ; enable bus too
00000138: E3800001    ;         ORR   r0, r0, #(ENABLE)
0000013C: E5090000    ;         STR   r0, [r9]
00000140:             ;     
00000140:             ;         ; read data
00000140: E5181000    ;         LDR   r1, [r8]      
00000144:             ;             
00000144:             ;         ; disable bus
00000144: E3C00001    ;         BIC   r0, r0, #(ENABLE)
00000148: E5090000    ;         STR   r0, [r9]
0000014C:             ; 
0000014C:             ;         ; test bit 7 is low else repeat
0000014C: E2111080    ;         ANDS  r1, r1, #0x80
00000150: 1AFFFFF4    ;         BNE   IOWait_repeat
00000154:             ; 
00000154: E8BD0003    ;         POP{r0,r1}
00000158: E1A0F00E    ;         MOV   PC,LR
0000015C:             ; 
0000015C:             ; 
0000015C:             ; 
0000015C:             ; ;---------------------------
0000015C:             ; ; literals/globals
0000015C:             ; ;---------------------------
0000015C:             ; BUTTON_STATE_NONE   EQU 0
0000015C:             ; BUTTON_STATE_TOP    EQU 1
0000015C:             ; BUTTON_STATE_BOTTOM EQU 2
0000015C: 00000000    ; G_BUTTON_FLAG       DEFW 0        ; see button states above
00000160: 00010000    ; DELAY_ITRS          DEFW 0x10000
00000164:             ; IOBASE              EQU 0x10000000
00000164:             ; IO_BUTTON_OFFSET    EQU 0x4
00000164:             ; BUTTON_TOP_MASK     EQU 0x40
00000164:             ; BUTTON_BOT_MASK     EQU 0x80
00000164:             ; 
00000164:             ; ;---------------------------
00000164:             ; ; main entry of program
00000164:             ; ;
00000164:             ; ; r1 : curent state
00000164:             ; ;---------------------------
00000164:             ; Main
00000164:             ;         ;- set up stack pointer
00000164: E28FDE11    ;         ADRL  SP, Stack_start
00000168: E28DDA01    ; 
0000016C:             ; 
0000016C: E3A01000    ;         MOV   r1, #0
00000170:             ;       
00000170: EBFFFFBE    ;         BL    EnableBacklight
00000174:             ; Main_loop
00000174:             ;         ; display curent message
00000174: EB000002    ;         BL    Display
00000178:             ;         ; delay with button interupt
00000178: EB000010    ;         BL    Delay
0000017C:             ;         ; change state
0000017C: EB000021    ;         BL    GetNextState
00000180: EAFFFFFB    ;         B     Main_loop
00000184:             ; 
00000184:             ; 
00000184:             ; ;---------------------------
00000184:             ; ;procedure Display(R0=state)
00000184:             ; ; sets the display to the correct message for this state
00000184:             ; ;---------------------------
00000184:             ; Display
00000184: E92D4003    ;         PUSH{r0,r1,LR}
00000188:             ;         ; switch state and set output
00000188:             ; 
00000188: E28F10B4    ;         ADR   r1, G_state0string     ; default string        
0000018C:             ; 
0000018C:             ;         ;state 0 G_state0string
0000018C: E3500000    ;         CMP   r0, #0
00000190: 028F10AC    ;         ADREQ r1, G_state0string 
00000194:             ; 
00000194:             ;         ;state 1 G_state1string
00000194: E3500001    ;         CMP   r0, #1
00000198: 028F10B0    ;         ADREQ r1, G_state1string 
0000019C:             ; 
0000019C:             ;         ;state 2 G_state2string
0000019C: E3500002    ;         CMP   r0, #2
000001A0: 028F10B6    ;         ADREQ r1, G_state2string 
000001A4:             ; 
000001A4:             ;         ;state 3 G_state3string
000001A4: E3500003    ;         CMP   r0, #3
000001A8: 028F10B9    ;         ADREQ r1, G_state3string 
000001AC:             ; 
000001AC: EBFFFFCC    ;         BL    ClearScreen             ; call clear screen
000001B0:             ; 
000001B0: E1A00001    ;         MOV   r0,r1                   ; call print string
000001B4: EBFFFFA4    ;         BL    PrintString
000001B8:             ; 
000001B8: E8BD4003    ;         POP{r0,r1,LR}
000001BC: E1A0F00E    ;         MOV   PC,LR
000001C0:             ; ;---------------------------
000001C0:             ; 
000001C0:             ; ;---------------------------
000001C0:             ; ;procedure Delay(R0=state)
000001C0:             ; ; delays the correct amount for this state
000001C0:             ; ; can be interrupted with a button press
000001C0:             ; ;---------------------------
000001C0:             ; Delay
000001C0: E92D000D    ;         PUSH{r0,r2,r3}
000001C4: E51F006C    ;         LDR   r0, DELAY_ITRS
000001C8:             ; Delay_repeat
000001C8: E51F3074    ;         LDR   r3, G_BUTTON_FLAG
000001CC: E3530000    ;         CMP   r3, #BUTTON_STATE_NONE
000001D0: 1A00000A    ;         BNE   Delay_skip
000001D4:             ; 
000001D4:             ;         ; test state of button and update flags
000001D4: E3A02201    ;         MOV   r2, #IOBASE
000001D8: E3A03000    ;         MOV   r3, #BUTTON_STATE_NONE
000001DC:             ; 
000001DC:             ;         ; load button value
000001DC: E5D22004    ;         LDRB  r2, [r2,#IO_BUTTON_OFFSET]
000001E0:             ; 
000001E0:             ;         ;test for top button
000001E0: E2123040    ;         ANDS r3, r2, #BUTTON_TOP_MASK
000001E4: 13A03001    ;         MOVNE r3, #BUTTON_STATE_TOP
000001E8: 1A000001    ;         BNE  Delay_store_btn
000001EC:             ; 
000001EC: E2123080    ;         ANDS r3, r2, #BUTTON_BOT_MASK
000001F0: 13A03002    ;         MOVNE r3, #BUTTON_STATE_BOTTOM
000001F4:             ; 
000001F4:             ; Delay_store_btn
000001F4: 150F30A0    ;         STRNE r3, G_BUTTON_FLAG
000001F8: E2500001    ;         SUBS  r0, r0, #1
000001FC: CAFFFFF1    ;         BGT   Delay_repeat
00000200:             ; Delay_skip
00000200: E8BD000D    ;         POP{r0,r2,r3}
00000204: E1A0F00E    ;         MOV   PC,LR
00000208:             ; ;---------------------------
00000208:             ; 
00000208:             ; ;---------------------------
00000208:             ; ;procedure GetNextState(R0=state OUTPUT)
00000208:             ; ; gets the next state and returns value in r0
00000208:             ; ;---------------------------
00000208:             ; GetNextState
00000208: E92D0006    ;         PUSH{r1,r2}
0000020C:             ; 
0000020C: E51F10B8    ;         LDR   r1, G_BUTTON_FLAG       ; if button is none then skip .. else
00000210: E3510000    ;         CMP   r1, #BUTTON_STATE_NONE
00000214: 0A000005    ;         BEQ   GetNextState_next
00000218:             ;         
00000218: E3A02000    ;         MOV   r2, #BUTTON_STATE_NONE  ; reset flags
0000021C: E50F20C8    ;         STR   r2, G_BUTTON_FLAG
00000220:             ; 
00000220: E3510001    ;         CMP   r1, #BUTTON_STATE_TOP   ; if button is top...
00000224: 03A00002    ;         MOVEQ r0, #2                  ; goto state  2
00000228: 13A00003    ;         MOVNE r0, #3                  ; else goto state 3
0000022C: EA000002    ;         B     GetNextState_end        ; return
00000230:             ; 
00000230:             ; GetNextState_next
00000230: E3500000    ;         CMP   r0, #0                  ; state 0 -> 1
00000234: 03A00001    ;         MOVEQ r0, #1                  ; state 1 -> 0 
00000238: 13A00000    ;         MOVNE r0, #0                  ; state 2 -> 0
0000023C:             ;                                       ; state 3 -> 0
0000023C:             ;         
0000023C:             ; GetNextState_end
0000023C: E8BD0006    ;         POP{r1,r2}
00000240: E1A0F00E    ;         MOV   PC,LR
00000244:             ; ;---------------------------
00000244:             ; 
00000244:             ; 
00000244:             ; G_state0string
00000244: 48 65 6C 6C ;         DEFB  "Hello World",0x0
00000248: 6F 20 57 6F ; 
0000024C: 72 6C 64 00 ; 
00000250:             ; G_state1string
00000250: 48 69 20 43 ;         DEFB  "Hi COMP22712!",0x0
00000254: 4F 4D 50 32 ; 
00000258: 32 37 31 32 ; 
0000025C: 21 00       ; 
0000025E:             ; G_state2string
0000025E: 54 6F 70 20 ;         DEFB  "Top Button",0x0
00000262: 42 75 74 74 ; 
00000266: 6F 6E 00    ; 
00000269:             ; G_state3string
00000269: 0D 0A 42 6F ;         DEFB  "\r\nBottom Button",0x0
0000026D: 74 74 6F 6D ; 
00000271: 20 42 75 74 ; 
00000275: 74 6F 6E 00 ; 
0000027C:             ; align
0000027C:             ; 
0000027C:             ; Stack_end
0000027C:             ;         DEFS 0x1000
0000127C:             ; Stack_start
0000127C:             ; 

Symbol Table: Labels
: LCD_Data                          10000000  Value
: LCD_Control                       10000004  Value
: ENABLE                            00000001  Value
: REGSEL                            00000002  Value
: READNW                            00000004  Value
: BACKLIGHT                         00000020  Value
: CONTROL_CHAR                      00000020  Value
: CLEAR                             00000001  Value
: PrintChar                         00000004  Local -- ARM
: PrintString                       0000004C  Local -- ARM
: PrintString_repeat                00000054  Local -- ARM
: PrintString_end                   00000068  Local -- ARM
: EnableBacklight                   00000070  Local -- ARM
: CURSOR_POS_MASK                   0000007F  Value
: MOVE_CUR_OFFSET                   00000080  Value
: LINE                              00000040  Value
: BEGIN_LINE_CLEAR                  0000000F  Value
: LINE_FEED                         0000000A  Value
: CARR_RET                          0000000D  Value
: ConvertControlChar                00000094  Local -- ARM
: ClearScreen                       000000E4  Local -- ARM
: IOWait                            00000124  Local -- ARM
: IOWait_repeat                     00000128  Local -- ARM
: BUTTON_STATE_NONE                 00000000  Value
: BUTTON_STATE_TOP                  00000001  Value
: BUTTON_STATE_BOTTOM               00000002  Value
: G_BUTTON_FLAG                     0000015C  Local -- ARM
: DELAY_ITRS                        00000160  Local -- ARM
: IOBASE                            10000000  Value
: IO_BUTTON_OFFSET                  00000004  Value
: BUTTON_TOP_MASK                   00000040  Value
: BUTTON_BOT_MASK                   00000080  Value
: Main                              00000164  Local -- ARM
: Main_loop                         00000174  Local -- ARM
: Display                           00000184  Local -- ARM
: Delay                             000001C0  Local -- ARM
: Delay_repeat                      000001C8  Local -- ARM
: Delay_store_btn                   000001F4  Local -- ARM
: Delay_skip                        00000200  Local -- ARM
: GetNextState                      00000208  Local -- ARM
: GetNextState_next                 00000230  Local -- ARM
: GetNextState_end                  0000023C  Local -- ARM
: G_state0string                    00000244  Local -- ARM
: G_state1string                    00000250  Local -- ARM
: G_state2string                    0000025E  Local -- ARM
: G_state3string                    00000269  Local -- ARM
: Stack_end                         0000027C  Local -- ARM
: Stack_start                       0000127C  Local -- ARM
