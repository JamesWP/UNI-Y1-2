00000000: F006  ;         bal Main
00000001:       ; 
00000001: 0000  ; counter defw 0 ;global counter variable
00000002: 0064  ; onehund defw 100; constant literal
00000003: 0030  ; asciioffset  defw 48 ; constant literal
00000004:       ; 
00000004: 082D  ; hund    defw 0x082D
00000005: 0801  ; button  defw 0x0801
00000006: 0802  ; backli  defw 0x0802
00000007:       ; 
00000007:       ; Main:     
00000007: 1201  ;                                         add r2,r0,#1
00000008: D106  ;                                         ld r1, [r0,#backli] ; load button pointer
00000009: DA20  ;                                         st r2, [r1]         ; load button state
0000000A:       ; 
0000000A: 16E1  ; MainLoop: add r6, PC, #1; save LR
0000000B: F014  ;                                         bal IncrCount ; call IncrCount
0000000C:       ;     
0000000C: D101  ;                                         ld r1, [r0,#counter]
0000000D: 16E1  ;           add r6, PC, #1; save LR
0000000E: F017  ;           bal GetDigs
0000000F:       ; 
0000000F: D104  ;           ld r1, [r0,#hund]
00000010: D503  ;                                         ld r5, [r0,#asciioffset]
00000011: 0254  ;           add r2, r2, r5
00000012: DA20  ;                                         st r2, [r1, #0]
00000013: 0374  ;           add r3, r3, r5
00000014: DB21  ;           st r3, [r1, #1]
00000015: 0494  ;           add r4, r4, r5
00000016: DC22  ;           st r4, [r1, #2]
00000017:       ; 
00000017: D105  ;                                         ld r1, [r0,#button] ; load button pointer
00000018: D120  ;                                         ld r1, [r1]         ; load button state
00000019: 4820  ;                                         subs r0,r1,r0
0000001A: 16E1  ;           add r6, PC, #1; save LR
0000001B: F608  ;                                         bne ZeroCount ; call zero if button
0000001C:       ; 
0000001C: F0ED  ;                                         bal MainLoop ; call IncrCount
0000001D:       ; 
0000001D: F000  ;                                         bal Stop;stop
0000001E:       ; 
0000001E: D81F  ; Stop:     st r0, [r0, #-1]; STOP PLZ
0000001F: F0FE  ;                                         bal Stop        ; loop indef
00000020:       ; 
00000020:       ; ;LR= R6
00000020: D101  ; IncrCount:ld r1, [r0,#counter]   ;load count
00000021: 1121  ;                                         add r1, r1, #1   ;incr
00000022: D901  ;                                         st r1, [r0,#counter]   ;store count+1
00000023: 07C0  ;                                         add PC, r6, r0   ;return
00000024:       ; 
00000024: D801  ; ZeroCount:st r0, [r0,#counter]   ; load count
00000025: 07C0  ;                                         add PC, r6, r0   ;return
00000026:       ; 
00000026:       ; ;LR= IN  R6
00000026:       ; ;R1= IN  number to count
00000026:       ; ;R2= OUT number of 100's
00000026:       ; ;R3= OUT number of 10's
00000026:       ; ;R4= OUT number of 1's
00000026:       ; GetDigs:
00000026: 0200  ;                                         add R2, R0, R0;R2 = 0
00000027: 0300  ;                                         add R3, R0, R0;R3 = 0
00000028: 0400  ;                                         add R4, R0, R0;R4 = 0
00000029: D502  ;           ld R5, [r0,#onehund]; = 100
0000002A:       ;                                         l100:
0000002A: 4834  ;           subs R0, R1, R5 ;if number < 100 ... goto l10
0000002B: FF03  ;           ble l10           ; goto l10
0000002C: 1241  ;           add R2, R2, #1    ;incr R2
0000002D: 4134  ;           sub R1, R1, R5  ;decr R1 by 100
0000002E: F0FB  ;           bal l100; repeat
0000002F:       ;                                         l10:
0000002F: 582A  ;           subs R0, R1, #10  ;if number <10 ... goto l1
00000030: FF03  ;           ble l1            ; goto l1
00000031: 1361  ;           add R3, R3, #1    ;incr R3
00000032: 512A  ;           sub R1, R1, #10   ;decr R1 by 10
00000033: F0FB  ;           bal l10
00000034:       ;           l1:
00000034: 5821  ;           subs R0, R1, #1   ;if number <1 ... done
00000035: FF03  ;           ble GetDigsReturn  ; return
00000036: 1481  ;           add R4, R4, #1    ;incr R4
00000037: 5121  ;           sub R1, R1, #1    ;decr R1 by 1
00000038: F0FB  ;           bal l1
00000039: 07C0  ;           GetDigsReturn: add PC, R6, R0; return
0000003A:       ; 
00000821:       ; org 0x0821
00000821: 0048  ;   data 0x0048;H
00000822: 0065  ;   data 0x0065;e
00000823: 006C  ;   data 0x006C;l
00000824: 006C  ;   data 0x006C;l
00000825: 006F  ;   data 0x006F;o
00000826:       ; 
00000826: 0010  ;   data 0x0010;_
00000827:       ; 
00000827: 0057  ;   data 0x0057;W
00000828: 006F  ;   data 0x006F;o
00000829: 0072  ;   data 0x0072;r
0000082A: 006C  ;   data 0x006C;l
0000082B: 0064  ;   data 0x0064;d
0000082C:       ;  
0000082C: 0010  ;   data 0x0010 
0000082D:       ; d100:
0000082D: 0030  ;   data 0x0030 
0000082E:       ; d10:
0000082E: 0030  ;   data 0x0030 
0000082F:       ; d1:
0000082F: 0030  ;   data 0x0030 
00000830:       ; 
00000830:       ; 
00000830:       ; 
00000834:       ; org 0x0834
00000834: 004A  ;   data 0x004A;J
00000835: 0057  ;   data 0x0057;W
00000836: 0050  ;   data 0x0050;P
00000837:       ; 
0000083C:       ; org 0x083c
0000083C: 0032  ;   data 0x0032;2
0000083D: 0030  ;   data 0x0030;0
0000083E: 0031  ;   data 0x0031;1
0000083F: 0034  ;   data 0x0034;4
00000840:       ; 
